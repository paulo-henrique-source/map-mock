"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ol";
exports.ids = ["vendor-chunks/ol"];
exports.modules = {

/***/ "(ssr)/./node_modules/ol/console.js":
/*!************************************!*\
  !*** ./node_modules/ol/console.js ***!
  \************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   setLevel: () => (/* binding */ setLevel),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/**\n * @module ol/console\n */ /**\n * @typedef {'info'|'warn'|'error'|'none'} Level\n */ /**\n * @type {Object<Level, number>}\n */ const levels = {\n    info: 1,\n    warn: 2,\n    error: 3,\n    none: 4\n};\n/**\n * @type {number}\n */ let level = levels.info;\n/**\n * Set the logging level.  By default, the level is set to 'info' and all\n * messages will be logged.  Set to 'warn' to only display warnings and errors.\n * Set to 'error' to only display errors.  Set to 'none' to silence all messages.\n *\n * @param {Level} l The new level.\n */ function setLevel(l) {\n    level = levels[l];\n}\n/**\n * @param  {...any} args Arguments to log\n */ function log(...args) {\n    if (level > levels.info) {\n        return;\n    }\n    console.log(...args); // eslint-disable-line no-console\n}\n/**\n * @param  {...any} args Arguments to log\n */ function warn(...args) {\n    if (level > levels.warn) {\n        return;\n    }\n    console.warn(...args); // eslint-disable-line no-console\n}\n/**\n * @param  {...any} args Arguments to log\n */ function error(...args) {\n    if (level > levels.error) {\n        return;\n    }\n    console.error(...args); // eslint-disable-line no-console\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2wvY29uc29sZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0NBRUMsR0FFRDs7Q0FFQyxHQUVEOztDQUVDLEdBQ0QsTUFBTUEsU0FBUztJQUNiQyxNQUFNO0lBQ05DLE1BQU07SUFDTkMsT0FBTztJQUNQQyxNQUFNO0FBQ1I7QUFFQTs7Q0FFQyxHQUNELElBQUlDLFFBQVFMLE9BQU9DLElBQUk7QUFFdkI7Ozs7OztDQU1DLEdBQ00sU0FBU0ssU0FBU0MsQ0FBQztJQUN4QkYsUUFBUUwsTUFBTSxDQUFDTyxFQUFFO0FBQ25CO0FBRUE7O0NBRUMsR0FDTSxTQUFTQyxJQUFJLEdBQUdDLElBQUk7SUFDekIsSUFBSUosUUFBUUwsT0FBT0MsSUFBSSxFQUFFO1FBQ3ZCO0lBQ0Y7SUFDQVMsUUFBUUYsR0FBRyxJQUFJQyxPQUFPLGlDQUFpQztBQUN6RDtBQUVBOztDQUVDLEdBQ00sU0FBU1AsS0FBSyxHQUFHTyxJQUFJO0lBQzFCLElBQUlKLFFBQVFMLE9BQU9FLElBQUksRUFBRTtRQUN2QjtJQUNGO0lBQ0FRLFFBQVFSLElBQUksSUFBSU8sT0FBTyxpQ0FBaUM7QUFDMUQ7QUFFQTs7Q0FFQyxHQUNNLFNBQVNOLE1BQU0sR0FBR00sSUFBSTtJQUMzQixJQUFJSixRQUFRTCxPQUFPRyxLQUFLLEVBQUU7UUFDeEI7SUFDRjtJQUNBTyxRQUFRUCxLQUFLLElBQUlNLE9BQU8saUNBQWlDO0FBQzNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFwLy4vbm9kZV9tb2R1bGVzL29sL2NvbnNvbGUuanM/ZDVkMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgb2wvY29uc29sZVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYgeydpbmZvJ3wnd2Fybid8J2Vycm9yJ3wnbm9uZSd9IExldmVsXG4gKi9cblxuLyoqXG4gKiBAdHlwZSB7T2JqZWN0PExldmVsLCBudW1iZXI+fVxuICovXG5jb25zdCBsZXZlbHMgPSB7XG4gIGluZm86IDEsXG4gIHdhcm46IDIsXG4gIGVycm9yOiAzLFxuICBub25lOiA0LFxufTtcblxuLyoqXG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5sZXQgbGV2ZWwgPSBsZXZlbHMuaW5mbztcblxuLyoqXG4gKiBTZXQgdGhlIGxvZ2dpbmcgbGV2ZWwuICBCeSBkZWZhdWx0LCB0aGUgbGV2ZWwgaXMgc2V0IHRvICdpbmZvJyBhbmQgYWxsXG4gKiBtZXNzYWdlcyB3aWxsIGJlIGxvZ2dlZC4gIFNldCB0byAnd2FybicgdG8gb25seSBkaXNwbGF5IHdhcm5pbmdzIGFuZCBlcnJvcnMuXG4gKiBTZXQgdG8gJ2Vycm9yJyB0byBvbmx5IGRpc3BsYXkgZXJyb3JzLiAgU2V0IHRvICdub25lJyB0byBzaWxlbmNlIGFsbCBtZXNzYWdlcy5cbiAqXG4gKiBAcGFyYW0ge0xldmVsfSBsIFRoZSBuZXcgbGV2ZWwuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRMZXZlbChsKSB7XG4gIGxldmVsID0gbGV2ZWxzW2xdO1xufVxuXG4vKipcbiAqIEBwYXJhbSAgey4uLmFueX0gYXJncyBBcmd1bWVudHMgdG8gbG9nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2coLi4uYXJncykge1xuICBpZiAobGV2ZWwgPiBsZXZlbHMuaW5mbykge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zb2xlLmxvZyguLi5hcmdzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG59XG5cbi8qKlxuICogQHBhcmFtICB7Li4uYW55fSBhcmdzIEFyZ3VtZW50cyB0byBsb2dcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdhcm4oLi4uYXJncykge1xuICBpZiAobGV2ZWwgPiBsZXZlbHMud2Fybikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zb2xlLndhcm4oLi4uYXJncyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxufVxuXG4vKipcbiAqIEBwYXJhbSAgey4uLmFueX0gYXJncyBBcmd1bWVudHMgdG8gbG9nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcnJvciguLi5hcmdzKSB7XG4gIGlmIChsZXZlbCA+IGxldmVscy5lcnJvcikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zb2xlLmVycm9yKC4uLmFyZ3MpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbn1cbiJdLCJuYW1lcyI6WyJsZXZlbHMiLCJpbmZvIiwid2FybiIsImVycm9yIiwibm9uZSIsImxldmVsIiwic2V0TGV2ZWwiLCJsIiwibG9nIiwiYXJncyIsImNvbnNvbGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/console.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/coordinate.js":
/*!***************************************!*\
  !*** ./node_modules/ol/coordinate.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   closestOnCircle: () => (/* binding */ closestOnCircle),\n/* harmony export */   closestOnSegment: () => (/* binding */ closestOnSegment),\n/* harmony export */   createStringXY: () => (/* binding */ createStringXY),\n/* harmony export */   degreesToStringHDMS: () => (/* binding */ degreesToStringHDMS),\n/* harmony export */   distance: () => (/* binding */ distance),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   getWorldsAway: () => (/* binding */ getWorldsAway),\n/* harmony export */   rotate: () => (/* binding */ rotate),\n/* harmony export */   scale: () => (/* binding */ scale),\n/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),\n/* harmony export */   squaredDistanceToSegment: () => (/* binding */ squaredDistanceToSegment),\n/* harmony export */   toStringHDMS: () => (/* binding */ toStringHDMS),\n/* harmony export */   toStringXY: () => (/* binding */ toStringXY),\n/* harmony export */   wrapX: () => (/* binding */ wrapX)\n/* harmony export */ });\n/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./extent.js */ \"(ssr)/./node_modules/ol/extent.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"(ssr)/./node_modules/ol/math.js\");\n/* harmony import */ var _string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./string.js */ \"(ssr)/./node_modules/ol/string.js\");\n/**\n * @module ol/coordinate\n */ \n\n\n/**\n * An array of numbers representing an `xy`, `xyz` or `xyzm` coordinate.\n * Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */ /**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */ /**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */ function add(coordinate, delta) {\n    coordinate[0] += +delta[0];\n    coordinate[1] += +delta[1];\n    return coordinate;\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */ function closestOnCircle(coordinate, circle) {\n    const r = circle.getRadius();\n    const center = circle.getCenter();\n    const x0 = center[0];\n    const y0 = center[1];\n    const x1 = coordinate[0];\n    const y1 = coordinate[1];\n    let dx = x1 - x0;\n    const dy = y1 - y0;\n    if (dx === 0 && dy === 0) {\n        dx = 1;\n    }\n    const d = Math.sqrt(dx * dx + dy * dy);\n    const x = x0 + r * dx / d;\n    const y = y0 + r * dy / d;\n    return [\n        x,\n        y\n    ];\n}\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */ function closestOnSegment(coordinate, segment) {\n    const x0 = coordinate[0];\n    const y0 = coordinate[1];\n    const start = segment[0];\n    const end = segment[1];\n    const x1 = start[0];\n    const y1 = start[1];\n    const x2 = end[0];\n    const y2 = end[1];\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n    let x, y;\n    if (along <= 0) {\n        x = x1;\n        y = y1;\n    } else if (along >= 1) {\n        x = x2;\n        y = y2;\n    } else {\n        x = x1 + along * dx;\n        y = y1 + along * dy;\n    }\n    return [\n        x,\n        y\n    ];\n}\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY();\n *     const out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY(2);\n *     const out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */ function createStringXY(fractionDigits) {\n    return(/**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */ function(coordinate) {\n        return toStringXY(coordinate, fractionDigits);\n    });\n}\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */ function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {\n    const normalizedDegrees = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.modulo)(degrees + 180, 360) - 180;\n    const x = Math.abs(3600 * normalizedDegrees);\n    const decimals = fractionDigits || 0;\n    let deg = Math.floor(x / 3600);\n    let min = Math.floor((x - deg * 3600) / 60);\n    let sec = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.toFixed)(x - deg * 3600 - min * 60, decimals);\n    if (sec >= 60) {\n        sec = 0;\n        min += 1;\n    }\n    if (min >= 60) {\n        min = 0;\n        deg += 1;\n    }\n    let hdms = deg + \"\\xb0\";\n    if (min !== 0 || sec !== 0) {\n        hdms += \" \" + (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.padNumber)(min, 2) + \"′\";\n    }\n    if (sec !== 0) {\n        hdms += \" \" + (0,_string_js__WEBPACK_IMPORTED_MODULE_1__.padNumber)(sec, 2, decimals) + \"″\";\n    }\n    if (normalizedDegrees !== 0) {\n        hdms += \" \" + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n    }\n    return hdms;\n}\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */ function format(coordinate, template, fractionDigits) {\n    if (coordinate) {\n        return template.replace(\"{x}\", coordinate[0].toFixed(fractionDigits)).replace(\"{y}\", coordinate[1].toFixed(fractionDigits));\n    }\n    return \"\";\n}\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */ function equals(coordinate1, coordinate2) {\n    let equals = true;\n    for(let i = coordinate1.length - 1; i >= 0; --i){\n        if (coordinate1[i] != coordinate2[i]) {\n            equals = false;\n            break;\n        }\n    }\n    return equals;\n}\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */ function rotate(coordinate, angle) {\n    const cosAngle = Math.cos(angle);\n    const sinAngle = Math.sin(angle);\n    const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    coordinate[0] = x;\n    coordinate[1] = y;\n    return coordinate;\n}\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */ function scale(coordinate, scale) {\n    coordinate[0] *= scale;\n    coordinate[1] *= scale;\n    return coordinate;\n}\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */ function squaredDistance(coord1, coord2) {\n    const dx = coord1[0] - coord2[0];\n    const dy = coord1[1] - coord2[1];\n    return dx * dx + dy * dy;\n}\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */ function distance(coord1, coord2) {\n    return Math.sqrt(squaredDistance(coord1, coord2));\n}\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */ function squaredDistanceToSegment(coordinate, segment) {\n    return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */ function toStringHDMS(coordinate, fractionDigits) {\n    if (coordinate) {\n        return degreesToStringHDMS(\"NS\", coordinate[1], fractionDigits) + \" \" + degreesToStringHDMS(\"EW\", coordinate[0], fractionDigits);\n    }\n    return \"\";\n}\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */ function toStringXY(coordinate, fractionDigits) {\n    return format(coordinate, \"{x}, {y}\", fractionDigits);\n}\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */ function wrapX(coordinate, projection) {\n    if (projection.canWrapX()) {\n        const worldWidth = (0,_extent_js__WEBPACK_IMPORTED_MODULE_2__.getWidth)(projection.getExtent());\n        const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n        if (worldsAway) {\n            coordinate[0] -= worldsAway * worldWidth;\n        }\n    }\n    return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */ function getWorldsAway(coordinate, projection, sourceExtentWidth) {\n    const projectionExtent = projection.getExtent();\n    let worldsAway = 0;\n    if (projection.canWrapX() && (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {\n        sourceExtentWidth = sourceExtentWidth || (0,_extent_js__WEBPACK_IMPORTED_MODULE_2__.getWidth)(projectionExtent);\n        worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);\n    }\n    return worldsAway;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/coordinate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/extent.js":
/*!***********************************!*\
  !*** ./node_modules/ol/extent.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyTransform: () => (/* binding */ applyTransform),\n/* harmony export */   approximatelyEquals: () => (/* binding */ approximatelyEquals),\n/* harmony export */   boundingExtent: () => (/* binding */ boundingExtent),\n/* harmony export */   buffer: () => (/* binding */ buffer),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   closestSquaredDistanceXY: () => (/* binding */ closestSquaredDistanceXY),\n/* harmony export */   containsCoordinate: () => (/* binding */ containsCoordinate),\n/* harmony export */   containsExtent: () => (/* binding */ containsExtent),\n/* harmony export */   containsXY: () => (/* binding */ containsXY),\n/* harmony export */   coordinateRelationship: () => (/* binding */ coordinateRelationship),\n/* harmony export */   createEmpty: () => (/* binding */ createEmpty),\n/* harmony export */   createOrUpdate: () => (/* binding */ createOrUpdate),\n/* harmony export */   createOrUpdateEmpty: () => (/* binding */ createOrUpdateEmpty),\n/* harmony export */   createOrUpdateFromCoordinate: () => (/* binding */ createOrUpdateFromCoordinate),\n/* harmony export */   createOrUpdateFromCoordinates: () => (/* binding */ createOrUpdateFromCoordinates),\n/* harmony export */   createOrUpdateFromFlatCoordinates: () => (/* binding */ createOrUpdateFromFlatCoordinates),\n/* harmony export */   createOrUpdateFromRings: () => (/* binding */ createOrUpdateFromRings),\n/* harmony export */   equals: () => (/* binding */ equals),\n/* harmony export */   extend: () => (/* binding */ extend),\n/* harmony export */   extendCoordinate: () => (/* binding */ extendCoordinate),\n/* harmony export */   extendCoordinates: () => (/* binding */ extendCoordinates),\n/* harmony export */   extendFlatCoordinates: () => (/* binding */ extendFlatCoordinates),\n/* harmony export */   extendRings: () => (/* binding */ extendRings),\n/* harmony export */   extendXY: () => (/* binding */ extendXY),\n/* harmony export */   forEachCorner: () => (/* binding */ forEachCorner),\n/* harmony export */   getArea: () => (/* binding */ getArea),\n/* harmony export */   getBottomLeft: () => (/* binding */ getBottomLeft),\n/* harmony export */   getBottomRight: () => (/* binding */ getBottomRight),\n/* harmony export */   getCenter: () => (/* binding */ getCenter),\n/* harmony export */   getCorner: () => (/* binding */ getCorner),\n/* harmony export */   getEnlargedArea: () => (/* binding */ getEnlargedArea),\n/* harmony export */   getForViewAndSize: () => (/* binding */ getForViewAndSize),\n/* harmony export */   getHeight: () => (/* binding */ getHeight),\n/* harmony export */   getIntersection: () => (/* binding */ getIntersection),\n/* harmony export */   getIntersectionArea: () => (/* binding */ getIntersectionArea),\n/* harmony export */   getMargin: () => (/* binding */ getMargin),\n/* harmony export */   getRotatedViewport: () => (/* binding */ getRotatedViewport),\n/* harmony export */   getSize: () => (/* binding */ getSize),\n/* harmony export */   getTopLeft: () => (/* binding */ getTopLeft),\n/* harmony export */   getTopRight: () => (/* binding */ getTopRight),\n/* harmony export */   getWidth: () => (/* binding */ getWidth),\n/* harmony export */   intersects: () => (/* binding */ intersects),\n/* harmony export */   intersectsSegment: () => (/* binding */ intersectsSegment),\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty),\n/* harmony export */   returnOrUpdate: () => (/* binding */ returnOrUpdate),\n/* harmony export */   scaleFromCenter: () => (/* binding */ scaleFromCenter),\n/* harmony export */   wrapAndSliceX: () => (/* binding */ wrapAndSliceX),\n/* harmony export */   wrapX: () => (/* binding */ wrapX)\n/* harmony export */ });\n/* harmony import */ var _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extent/Relationship.js */ \"(ssr)/./node_modules/ol/extent/Relationship.js\");\n/**\n * @module ol/extent\n */ \n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */ /**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */ /**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */ function boundingExtent(coordinates) {\n    const extent = createEmpty();\n    for(let i = 0, ii = coordinates.length; i < ii; ++i){\n        extendCoordinate(extent, coordinates[i]);\n    }\n    return extent;\n}\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */ function _boundingExtentXYs(xs, ys, dest) {\n    const minX = Math.min.apply(null, xs);\n    const minY = Math.min.apply(null, ys);\n    const maxX = Math.max.apply(null, xs);\n    const maxY = Math.max.apply(null, ys);\n    return createOrUpdate(minX, minY, maxX, maxY, dest);\n}\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n * @api\n */ function buffer(extent, value, dest) {\n    if (dest) {\n        dest[0] = extent[0] - value;\n        dest[1] = extent[1] - value;\n        dest[2] = extent[2] + value;\n        dest[3] = extent[3] + value;\n        return dest;\n    }\n    return [\n        extent[0] - value,\n        extent[1] - value,\n        extent[2] + value,\n        extent[3] + value\n    ];\n}\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [dest] Extent.\n * @return {Extent} The clone.\n */ function clone(extent, dest) {\n    if (dest) {\n        dest[0] = extent[0];\n        dest[1] = extent[1];\n        dest[2] = extent[2];\n        dest[3] = extent[3];\n        return dest;\n    }\n    return extent.slice();\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */ function closestSquaredDistanceXY(extent, x, y) {\n    let dx, dy;\n    if (x < extent[0]) {\n        dx = extent[0] - x;\n    } else if (extent[2] < x) {\n        dx = x - extent[2];\n    } else {\n        dx = 0;\n    }\n    if (y < extent[1]) {\n        dy = extent[1] - y;\n    } else if (extent[3] < y) {\n        dy = y - extent[3];\n    } else {\n        dy = 0;\n    }\n    return dx * dx + dy * dy;\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */ function containsCoordinate(extent, coordinate) {\n    return containsXY(extent, coordinate[0], coordinate[1]);\n}\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */ function containsExtent(extent1, extent2) {\n    return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n}\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */ function containsXY(extent, x, y) {\n    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */ function coordinateRelationship(extent, coordinate) {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let relationship = _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UNKNOWN;\n    if (x < minX) {\n        relationship = relationship | _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LEFT;\n    } else if (x > maxX) {\n        relationship = relationship | _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].RIGHT;\n    }\n    if (y < minY) {\n        relationship = relationship | _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BELOW;\n    } else if (y > maxY) {\n        relationship = relationship | _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ABOVE;\n    }\n    if (relationship === _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].UNKNOWN) {\n        relationship = _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INTERSECTING;\n    }\n    return relationship;\n}\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */ function createEmpty() {\n    return [\n        Infinity,\n        Infinity,\n        -Infinity,\n        -Infinity\n    ];\n}\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */ function createOrUpdate(minX, minY, maxX, maxY, dest) {\n    if (dest) {\n        dest[0] = minX;\n        dest[1] = minY;\n        dest[2] = maxX;\n        dest[3] = maxY;\n        return dest;\n    }\n    return [\n        minX,\n        minY,\n        maxX,\n        maxY\n    ];\n}\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */ function createOrUpdateEmpty(dest) {\n    return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */ function createOrUpdateFromCoordinate(coordinate, dest) {\n    const x = coordinate[0];\n    const y = coordinate[1];\n    return createOrUpdate(x, y, x, y, dest);\n}\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */ function createOrUpdateFromCoordinates(coordinates, dest) {\n    const extent = createOrUpdateEmpty(dest);\n    return extendCoordinates(extent, coordinates);\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */ function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, dest) {\n    const extent = createOrUpdateEmpty(dest);\n    return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */ function createOrUpdateFromRings(rings, dest) {\n    const extent = createOrUpdateEmpty(dest);\n    return extendRings(extent, rings);\n}\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */ function equals(extent1, extent2) {\n    return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];\n}\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */ function approximatelyEquals(extent1, extent2, tolerance) {\n    return Math.abs(extent1[0] - extent2[0]) < tolerance && Math.abs(extent1[2] - extent2[2]) < tolerance && Math.abs(extent1[1] - extent2[1]) < tolerance && Math.abs(extent1[3] - extent2[3]) < tolerance;\n}\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */ function extend(extent1, extent2) {\n    if (extent2[0] < extent1[0]) {\n        extent1[0] = extent2[0];\n    }\n    if (extent2[2] > extent1[2]) {\n        extent1[2] = extent2[2];\n    }\n    if (extent2[1] < extent1[1]) {\n        extent1[1] = extent2[1];\n    }\n    if (extent2[3] > extent1[3]) {\n        extent1[3] = extent2[3];\n    }\n    return extent1;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */ function extendCoordinate(extent, coordinate) {\n    if (coordinate[0] < extent[0]) {\n        extent[0] = coordinate[0];\n    }\n    if (coordinate[0] > extent[2]) {\n        extent[2] = coordinate[0];\n    }\n    if (coordinate[1] < extent[1]) {\n        extent[1] = coordinate[1];\n    }\n    if (coordinate[1] > extent[3]) {\n        extent[3] = coordinate[1];\n    }\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */ function extendCoordinates(extent, coordinates) {\n    for(let i = 0, ii = coordinates.length; i < ii; ++i){\n        extendCoordinate(extent, coordinates[i]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */ function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\n    for(; offset < end; offset += stride){\n        extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */ function extendRings(extent, rings) {\n    for(let i = 0, ii = rings.length; i < ii; ++i){\n        extendCoordinates(extent, rings[i]);\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */ function extendXY(extent, x, y) {\n    extent[0] = Math.min(extent[0], x);\n    extent[1] = Math.min(extent[1], y);\n    extent[2] = Math.max(extent[2], x);\n    extent[3] = Math.max(extent[3], y);\n}\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */ function forEachCorner(extent, callback) {\n    let val;\n    val = callback(getBottomLeft(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getBottomRight(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getTopRight(extent));\n    if (val) {\n        return val;\n    }\n    val = callback(getTopLeft(extent));\n    if (val) {\n        return val;\n    }\n    return false;\n}\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */ function getArea(extent) {\n    let area = 0;\n    if (!isEmpty(extent)) {\n        area = getWidth(extent) * getHeight(extent);\n    }\n    return area;\n}\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */ function getBottomLeft(extent) {\n    return [\n        extent[0],\n        extent[1]\n    ];\n}\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */ function getBottomRight(extent) {\n    return [\n        extent[2],\n        extent[1]\n    ];\n}\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */ function getCenter(extent) {\n    return [\n        (extent[0] + extent[2]) / 2,\n        (extent[1] + extent[3]) / 2\n    ];\n}\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */ function getCorner(extent, corner) {\n    let coordinate;\n    if (corner === \"bottom-left\") {\n        coordinate = getBottomLeft(extent);\n    } else if (corner === \"bottom-right\") {\n        coordinate = getBottomRight(extent);\n    } else if (corner === \"top-left\") {\n        coordinate = getTopLeft(extent);\n    } else if (corner === \"top-right\") {\n        coordinate = getTopRight(extent);\n    } else {\n        throw new Error(\"Invalid corner\");\n    }\n    return coordinate;\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */ function getEnlargedArea(extent1, extent2) {\n    const minX = Math.min(extent1[0], extent2[0]);\n    const minY = Math.min(extent1[1], extent2[1]);\n    const maxX = Math.max(extent1[2], extent2[2]);\n    const maxY = Math.max(extent1[3], extent2[3]);\n    return (maxX - minX) * (maxY - minY);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */ function getForViewAndSize(center, resolution, rotation, size, dest) {\n    const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(center, resolution, rotation, size);\n    return createOrUpdate(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), dest);\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */ function getRotatedViewport(center, resolution, rotation, size) {\n    const dx = resolution * size[0] / 2;\n    const dy = resolution * size[1] / 2;\n    const cosRotation = Math.cos(rotation);\n    const sinRotation = Math.sin(rotation);\n    const xCos = dx * cosRotation;\n    const xSin = dx * sinRotation;\n    const yCos = dy * cosRotation;\n    const ySin = dy * sinRotation;\n    const x = center[0];\n    const y = center[1];\n    return [\n        x - xCos + ySin,\n        y - xSin - yCos,\n        x - xCos - ySin,\n        y - xSin + yCos,\n        x + xCos - ySin,\n        y + xSin + yCos,\n        x + xCos + ySin,\n        y + xSin - yCos,\n        x - xCos + ySin,\n        y - xSin - yCos\n    ];\n}\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */ function getHeight(extent) {\n    return extent[3] - extent[1];\n}\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */ function getIntersectionArea(extent1, extent2) {\n    const intersection = getIntersection(extent1, extent2);\n    return getArea(intersection);\n}\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [dest] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */ function getIntersection(extent1, extent2, dest) {\n    const intersection = dest ? dest : createEmpty();\n    if (intersects(extent1, extent2)) {\n        if (extent1[0] > extent2[0]) {\n            intersection[0] = extent1[0];\n        } else {\n            intersection[0] = extent2[0];\n        }\n        if (extent1[1] > extent2[1]) {\n            intersection[1] = extent1[1];\n        } else {\n            intersection[1] = extent2[1];\n        }\n        if (extent1[2] < extent2[2]) {\n            intersection[2] = extent1[2];\n        } else {\n            intersection[2] = extent2[2];\n        }\n        if (extent1[3] < extent2[3]) {\n            intersection[3] = extent1[3];\n        } else {\n            intersection[3] = extent2[3];\n        }\n    } else {\n        createOrUpdateEmpty(intersection);\n    }\n    return intersection;\n}\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */ function getMargin(extent) {\n    return getWidth(extent) + getHeight(extent);\n}\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */ function getSize(extent) {\n    return [\n        extent[2] - extent[0],\n        extent[3] - extent[1]\n    ];\n}\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */ function getTopLeft(extent) {\n    return [\n        extent[0],\n        extent[3]\n    ];\n}\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */ function getTopRight(extent) {\n    return [\n        extent[2],\n        extent[3]\n    ];\n}\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */ function getWidth(extent) {\n    return extent[2] - extent[0];\n}\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */ function intersects(extent1, extent2) {\n    return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];\n}\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */ function isEmpty(extent) {\n    return extent[2] < extent[0] || extent[3] < extent[1];\n}\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */ function returnOrUpdate(extent, dest) {\n    if (dest) {\n        dest[0] = extent[0];\n        dest[1] = extent[1];\n        dest[2] = extent[2];\n        dest[3] = extent[3];\n        return dest;\n    }\n    return extent;\n}\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */ function scaleFromCenter(extent, value) {\n    const deltaX = (extent[2] - extent[0]) / 2 * (value - 1);\n    const deltaY = (extent[3] - extent[1]) / 2 * (value - 1);\n    extent[0] -= deltaX;\n    extent[2] += deltaX;\n    extent[1] -= deltaY;\n    extent[3] += deltaY;\n}\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */ function intersectsSegment(extent, start, end) {\n    let intersects = false;\n    const startRel = coordinateRelationship(extent, start);\n    const endRel = coordinateRelationship(extent, end);\n    if (startRel === _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INTERSECTING || endRel === _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INTERSECTING) {\n        intersects = true;\n    } else {\n        const minX = extent[0];\n        const minY = extent[1];\n        const maxX = extent[2];\n        const maxY = extent[3];\n        const startX = start[0];\n        const startY = start[1];\n        const endX = end[0];\n        const endY = end[1];\n        const slope = (endY - startY) / (endX - startX);\n        let x, y;\n        if (!!(endRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ABOVE) && !(startRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ABOVE)) {\n            // potentially intersects top\n            x = endX - (endY - maxY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects && !!(endRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].RIGHT) && !(startRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].RIGHT)) {\n            // potentially intersects right\n            y = endY - (endX - maxX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n        if (!intersects && !!(endRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BELOW) && !(startRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BELOW)) {\n            // potentially intersects bottom\n            x = endX - (endY - minY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects && !!(endRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LEFT) && !(startRel & _extent_Relationship_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LEFT)) {\n            // potentially intersects left\n            y = endY - (endX - minX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n    }\n    return intersects;\n}\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [dest] Destination extent.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */ function applyTransform(extent, transformFn, dest, stops) {\n    if (isEmpty(extent)) {\n        return createOrUpdateEmpty(dest);\n    }\n    let coordinates = [];\n    if (stops > 1) {\n        const width = extent[2] - extent[0];\n        const height = extent[3] - extent[1];\n        for(let i = 0; i < stops; ++i){\n            coordinates.push(extent[0] + width * i / stops, extent[1], extent[2], extent[1] + height * i / stops, extent[2] - width * i / stops, extent[3], extent[0], extent[3] - height * i / stops);\n        }\n    } else {\n        coordinates = [\n            extent[0],\n            extent[1],\n            extent[2],\n            extent[1],\n            extent[2],\n            extent[3],\n            extent[0],\n            extent[3]\n        ];\n    }\n    transformFn(coordinates, coordinates, 2);\n    const xs = [];\n    const ys = [];\n    for(let i = 0, l = coordinates.length; i < l; i += 2){\n        xs.push(coordinates[i]);\n        ys.push(coordinates[i + 1]);\n    }\n    return _boundingExtentXYs(xs, ys, dest);\n}\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */ function wrapX(extent, projection) {\n    const projectionExtent = projection.getExtent();\n    const center = getCenter(extent);\n    if (projection.canWrapX() && (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {\n        const worldWidth = getWidth(projectionExtent);\n        const worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);\n        const offset = worldsAway * worldWidth;\n        extent[0] -= offset;\n        extent[2] -= offset;\n    }\n    return extent;\n}\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Array<Extent>} The extent within the real world extent.\n */ function wrapAndSliceX(extent, projection) {\n    if (projection.canWrapX()) {\n        const projectionExtent = projection.getExtent();\n        if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n            return [\n                [\n                    projectionExtent[0],\n                    extent[1],\n                    projectionExtent[2],\n                    extent[3]\n                ]\n            ];\n        }\n        wrapX(extent, projection);\n        const worldWidth = getWidth(projectionExtent);\n        if (getWidth(extent) > worldWidth) {\n            // the extent wraps around on itself\n            return [\n                [\n                    projectionExtent[0],\n                    extent[1],\n                    projectionExtent[2],\n                    extent[3]\n                ]\n            ];\n        }\n        if (extent[0] < projectionExtent[0]) {\n            // the extent crosses the anti meridian, so it needs to be sliced\n            return [\n                [\n                    extent[0] + worldWidth,\n                    extent[1],\n                    projectionExtent[2],\n                    extent[3]\n                ],\n                [\n                    projectionExtent[0],\n                    extent[1],\n                    extent[2],\n                    extent[3]\n                ]\n            ];\n        }\n        if (extent[2] > projectionExtent[2]) {\n            // the extent crosses the anti meridian, so it needs to be sliced\n            return [\n                [\n                    extent[0],\n                    extent[1],\n                    projectionExtent[2],\n                    extent[3]\n                ],\n                [\n                    projectionExtent[0],\n                    extent[1],\n                    extent[2] - worldWidth,\n                    extent[3]\n                ]\n            ];\n        }\n    }\n    return [\n        extent\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/extent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/extent/Relationship.js":
/*!************************************************!*\
  !*** ./node_modules/ol/extent/Relationship.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\n * @module ol/extent/Relationship\n */ /**\n * Relationship to an extent.\n * @enum {number}\n */ /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    UNKNOWN: 0,\n    INTERSECTING: 1,\n    ABOVE: 2,\n    RIGHT: 4,\n    BELOW: 8,\n    LEFT: 16\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2wvZXh0ZW50L1JlbGF0aW9uc2hpcC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0NBRUMsR0FFRDs7O0NBR0MsR0FDRCxpRUFBZTtJQUNiQSxTQUFTO0lBQ1RDLGNBQWM7SUFDZEMsT0FBTztJQUNQQyxPQUFPO0lBQ1BDLE9BQU87SUFDUEMsTUFBTTtBQUNSLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL21hcC8uL25vZGVfbW9kdWxlcy9vbC9leHRlbnQvUmVsYXRpb25zaGlwLmpzPzM0NzEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIG9sL2V4dGVudC9SZWxhdGlvbnNoaXBcbiAqL1xuXG4vKipcbiAqIFJlbGF0aW9uc2hpcCB0byBhbiBleHRlbnQuXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5leHBvcnQgZGVmYXVsdCB7XG4gIFVOS05PV046IDAsXG4gIElOVEVSU0VDVElORzogMSxcbiAgQUJPVkU6IDIsXG4gIFJJR0hUOiA0LFxuICBCRUxPVzogOCxcbiAgTEVGVDogMTYsXG59O1xuIl0sIm5hbWVzIjpbIlVOS05PV04iLCJJTlRFUlNFQ1RJTkciLCJBQk9WRSIsIlJJR0hUIiwiQkVMT1ciLCJMRUZUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/extent/Relationship.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/math.js":
/*!*********************************!*\
  !*** ./node_modules/ol/math.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ceil: () => (/* binding */ ceil),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   floor: () => (/* binding */ floor),\n/* harmony export */   lerp: () => (/* binding */ lerp),\n/* harmony export */   modulo: () => (/* binding */ modulo),\n/* harmony export */   round: () => (/* binding */ round),\n/* harmony export */   solveLinearSystem: () => (/* binding */ solveLinearSystem),\n/* harmony export */   squaredDistance: () => (/* binding */ squaredDistance),\n/* harmony export */   squaredSegmentDistance: () => (/* binding */ squaredSegmentDistance),\n/* harmony export */   toDegrees: () => (/* binding */ toDegrees),\n/* harmony export */   toFixed: () => (/* binding */ toFixed),\n/* harmony export */   toRadians: () => (/* binding */ toRadians)\n/* harmony export */ });\n/**\n * @module ol/math\n */ /**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */ function clamp(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */ function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    if (dx !== 0 || dy !== 0) {\n        const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) {\n            x1 = x2;\n            y1 = y2;\n        } else if (t > 0) {\n            x1 += dx * t;\n            y1 += dy * t;\n        }\n    }\n    return squaredDistance(x, y, x1, y1);\n}\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */ function squaredDistance(x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    return dx * dx + dy * dy;\n}\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>|null} The resulting vector.\n */ function solveLinearSystem(mat) {\n    const n = mat.length;\n    for(let i = 0; i < n; i++){\n        // Find max in the i-th column (ignoring i - 1 first rows)\n        let maxRow = i;\n        let maxEl = Math.abs(mat[i][i]);\n        for(let r = i + 1; r < n; r++){\n            const absValue = Math.abs(mat[r][i]);\n            if (absValue > maxEl) {\n                maxEl = absValue;\n                maxRow = r;\n            }\n        }\n        if (maxEl === 0) {\n            return null; // matrix is singular\n        }\n        // Swap max row with i-th (current) row\n        const tmp = mat[maxRow];\n        mat[maxRow] = mat[i];\n        mat[i] = tmp;\n        // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n        for(let j = i + 1; j < n; j++){\n            const coef = -mat[j][i] / mat[i][i];\n            for(let k = i; k < n + 1; k++){\n                if (i == k) {\n                    mat[j][k] = 0;\n                } else {\n                    mat[j][k] += coef * mat[i][k];\n                }\n            }\n        }\n    }\n    // Solve Ax=b for upper triangular matrix A (mat)\n    const x = new Array(n);\n    for(let l = n - 1; l >= 0; l--){\n        x[l] = mat[l][n] / mat[l][l];\n        for(let m = l - 1; m >= 0; m--){\n            mat[m][n] -= mat[m][l] * x[l];\n        }\n    }\n    return x;\n}\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */ function toDegrees(angleInRadians) {\n    return angleInRadians * 180 / Math.PI;\n}\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */ function toRadians(angleInDegrees) {\n    return angleInDegrees * Math.PI / 180;\n}\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */ function modulo(a, b) {\n    const r = a % b;\n    return r * b < 0 ? r + b : r;\n}\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */ function lerp(a, b, x) {\n    return a + x * (b - a);\n}\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */ function toFixed(n, decimals) {\n    const factor = Math.pow(10, decimals);\n    return Math.round(n * factor) / factor;\n}\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */ function round(n, decimals) {\n    return Math.round(toFixed(n, decimals));\n}\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */ function floor(n, decimals) {\n    return Math.floor(toFixed(n, decimals));\n}\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */ function ceil(n, decimals) {\n    return Math.ceil(toFixed(n, decimals));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/math.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/obj.js":
/*!********************************!*\
  !*** ./node_modules/ol/obj.js ***!
  \********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clear: () => (/* binding */ clear),\n/* harmony export */   isEmpty: () => (/* binding */ isEmpty)\n/* harmony export */ });\n/**\n * @module ol/obj\n */ /**\n * Removes all properties from an object.\n * @param {Object<string, unknown>} object The object to clear.\n */ function clear(object) {\n    for(const property in object){\n        delete object[property];\n    }\n}\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */ function isEmpty(object) {\n    let property;\n    for(property in object){\n        return false;\n    }\n    return !property;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2wvb2JqLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FFRDs7O0NBR0MsR0FDTSxTQUFTQSxNQUFNQyxNQUFNO0lBQzFCLElBQUssTUFBTUMsWUFBWUQsT0FBUTtRQUM3QixPQUFPQSxNQUFNLENBQUNDLFNBQVM7SUFDekI7QUFDRjtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTQyxRQUFRRixNQUFNO0lBQzVCLElBQUlDO0lBQ0osSUFBS0EsWUFBWUQsT0FBUTtRQUN2QixPQUFPO0lBQ1Q7SUFDQSxPQUFPLENBQUNDO0FBQ1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXAvLi9ub2RlX21vZHVsZXMvb2wvb2JqLmpzPzk4NDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIG9sL29ialxuICovXG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgcHJvcGVydGllcyBmcm9tIGFuIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgdW5rbm93bj59IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsZWFyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXIob2JqZWN0KSB7XG4gIGZvciAoY29uc3QgcHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGhhcyBhbnkgcHJvcGVydGllcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRoZSBvYmplY3QgaXMgZW1wdHkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KG9iamVjdCkge1xuICBsZXQgcHJvcGVydHk7XG4gIGZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAhcHJvcGVydHk7XG59XG4iXSwibmFtZXMiOlsiY2xlYXIiLCJvYmplY3QiLCJwcm9wZXJ0eSIsImlzRW1wdHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/obj.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/proj.js":
/*!*********************************!*\
  !*** ./node_modules/ol/proj.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   METERS_PER_UNIT: () => (/* reexport safe */ _proj_Units_js__WEBPACK_IMPORTED_MODULE_0__.METERS_PER_UNIT),\n/* harmony export */   Projection: () => (/* reexport safe */ _proj_Projection_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   addCommon: () => (/* binding */ addCommon),\n/* harmony export */   addCoordinateTransforms: () => (/* binding */ addCoordinateTransforms),\n/* harmony export */   addEquivalentProjections: () => (/* binding */ addEquivalentProjections),\n/* harmony export */   addEquivalentTransforms: () => (/* binding */ addEquivalentTransforms),\n/* harmony export */   addProjection: () => (/* binding */ addProjection),\n/* harmony export */   addProjections: () => (/* binding */ addProjections),\n/* harmony export */   clearAllProjections: () => (/* binding */ clearAllProjections),\n/* harmony export */   clearUserProjection: () => (/* binding */ clearUserProjection),\n/* harmony export */   cloneTransform: () => (/* binding */ cloneTransform),\n/* harmony export */   createProjection: () => (/* binding */ createProjection),\n/* harmony export */   createSafeCoordinateTransform: () => (/* binding */ createSafeCoordinateTransform),\n/* harmony export */   createTransformFromCoordinateTransform: () => (/* binding */ createTransformFromCoordinateTransform),\n/* harmony export */   disableCoordinateWarning: () => (/* binding */ disableCoordinateWarning),\n/* harmony export */   equivalent: () => (/* binding */ equivalent),\n/* harmony export */   fromLonLat: () => (/* binding */ fromLonLat),\n/* harmony export */   fromUserCoordinate: () => (/* binding */ fromUserCoordinate),\n/* harmony export */   fromUserExtent: () => (/* binding */ fromUserExtent),\n/* harmony export */   fromUserResolution: () => (/* binding */ fromUserResolution),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getPointResolution: () => (/* binding */ getPointResolution),\n/* harmony export */   getTransform: () => (/* binding */ getTransform),\n/* harmony export */   getTransformFromProjections: () => (/* binding */ getTransformFromProjections),\n/* harmony export */   getUserProjection: () => (/* binding */ getUserProjection),\n/* harmony export */   identityTransform: () => (/* binding */ identityTransform),\n/* harmony export */   setUserProjection: () => (/* binding */ setUserProjection),\n/* harmony export */   toLonLat: () => (/* binding */ toLonLat),\n/* harmony export */   toUserCoordinate: () => (/* binding */ toUserCoordinate),\n/* harmony export */   toUserExtent: () => (/* binding */ toUserExtent),\n/* harmony export */   toUserResolution: () => (/* binding */ toUserResolution),\n/* harmony export */   transform: () => (/* binding */ transform),\n/* harmony export */   transformExtent: () => (/* binding */ transformExtent),\n/* harmony export */   transformWithProjections: () => (/* binding */ transformWithProjections),\n/* harmony export */   useGeographic: () => (/* binding */ useGeographic)\n/* harmony export */ });\n/* harmony import */ var _proj_Projection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./proj/Projection.js */ \"(ssr)/./node_modules/ol/proj/Projection.js\");\n/* harmony import */ var _proj_epsg3857_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./proj/epsg3857.js */ \"(ssr)/./node_modules/ol/proj/epsg3857.js\");\n/* harmony import */ var _proj_epsg4326_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./proj/epsg4326.js */ \"(ssr)/./node_modules/ol/proj/epsg4326.js\");\n/* harmony import */ var _proj_Units_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./proj/Units.js */ \"(ssr)/./node_modules/ol/proj/Units.js\");\n/* harmony import */ var _proj_projections_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./proj/projections.js */ \"(ssr)/./node_modules/ol/proj/projections.js\");\n/* harmony import */ var _proj_transforms_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./proj/transforms.js */ \"(ssr)/./node_modules/ol/proj/transforms.js\");\n/* harmony import */ var _extent_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./extent.js */ \"(ssr)/./node_modules/ol/extent.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./math.js */ \"(ssr)/./node_modules/ol/math.js\");\n/* harmony import */ var _coordinate_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./coordinate.js */ \"(ssr)/./node_modules/ol/coordinate.js\");\n/* harmony import */ var _sphere_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sphere.js */ \"(ssr)/./node_modules/ol/sphere.js\");\n/* harmony import */ var _console_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./console.js */ \"(ssr)/./node_modules/ol/console.js\");\n/**\n * @module ol/proj\n */ /**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */ \n\n\n\n\n\n\n\n\n\n\n/**\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */ /**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */ \n\nlet showCoordinateWarning = true;\n/**\n * @param {boolean} [disable = true] Disable console info about `useGeographic()`\n */ function disableCoordinateWarning(disable) {\n    const hide = disable === undefined ? true : disable;\n    showCoordinateWarning = !hide;\n}\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */ function cloneTransform(input, output) {\n    if (output !== undefined) {\n        for(let i = 0, ii = input.length; i < ii; ++i){\n            output[i] = input[i];\n        }\n        output = output;\n    } else {\n        output = input.slice();\n    }\n    return output;\n}\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Input coordinate array (same array as input).\n */ function identityTransform(input, output) {\n    if (output !== undefined && input !== output) {\n        for(let i = 0, ii = input.length; i < ii; ++i){\n            output[i] = input[i];\n        }\n        input = output;\n    }\n    return input;\n}\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */ function addProjection(projection) {\n    (0,_proj_projections_js__WEBPACK_IMPORTED_MODULE_2__.add)(projection.getCode(), projection);\n    (0,_proj_transforms_js__WEBPACK_IMPORTED_MODULE_3__.add)(projection, projection, cloneTransform);\n}\n/**\n * @param {Array<Projection>} projections Projections.\n */ function addProjections(projections) {\n    projections.forEach(addProjection);\n}\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection|null} Projection object, or null if not in list.\n * @api\n */ function get(projectionLike) {\n    return typeof projectionLike === \"string\" ? (0,_proj_projections_js__WEBPACK_IMPORTED_MODULE_2__.get)(/** @type {string} */ projectionLike) : /** @type {Projection} */ projectionLike || null;\n}\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the `point` pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").Units} [units] Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */ function getPointResolution(projection, resolution, point, units) {\n    projection = get(projection);\n    let pointResolution;\n    const getter = projection.getPointResolutionFunc();\n    if (getter) {\n        pointResolution = getter(resolution, point);\n        if (units && units !== projection.getUnits()) {\n            const metersPerUnit = projection.getMetersPerUnit();\n            if (metersPerUnit) {\n                pointResolution = pointResolution * metersPerUnit / _proj_Units_js__WEBPACK_IMPORTED_MODULE_0__.METERS_PER_UNIT[units];\n            }\n        }\n    } else {\n        const projUnits = projection.getUnits();\n        if (projUnits == \"degrees\" && !units || units == \"degrees\") {\n            pointResolution = resolution;\n        } else {\n            // Estimate point resolution by transforming the center pixel to EPSG:4326,\n            // measuring its width and height on the normal sphere, and taking the\n            // average of the width and height.\n            const toEPSG4326 = getTransformFromProjections(projection, get(\"EPSG:4326\"));\n            if (toEPSG4326 === identityTransform && projUnits !== \"degrees\") {\n                // no transform is available\n                pointResolution = resolution * projection.getMetersPerUnit();\n            } else {\n                let vertices = [\n                    point[0] - resolution / 2,\n                    point[1],\n                    point[0] + resolution / 2,\n                    point[1],\n                    point[0],\n                    point[1] - resolution / 2,\n                    point[0],\n                    point[1] + resolution / 2\n                ];\n                vertices = toEPSG4326(vertices, vertices, 2);\n                const width = (0,_sphere_js__WEBPACK_IMPORTED_MODULE_4__.getDistance)(vertices.slice(0, 2), vertices.slice(2, 4));\n                const height = (0,_sphere_js__WEBPACK_IMPORTED_MODULE_4__.getDistance)(vertices.slice(4, 6), vertices.slice(6, 8));\n                pointResolution = (width + height) / 2;\n            }\n            const metersPerUnit = units ? _proj_Units_js__WEBPACK_IMPORTED_MODULE_0__.METERS_PER_UNIT[units] : projection.getMetersPerUnit();\n            if (metersPerUnit !== undefined) {\n                pointResolution /= metersPerUnit;\n            }\n        }\n    }\n    return pointResolution;\n}\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */ function addEquivalentProjections(projections) {\n    addProjections(projections);\n    projections.forEach(function(source) {\n        projections.forEach(function(destination) {\n            if (source !== destination) {\n                (0,_proj_transforms_js__WEBPACK_IMPORTED_MODULE_3__.add)(source, destination, cloneTransform);\n            }\n        });\n    });\n}\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */ function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {\n    projections1.forEach(function(projection1) {\n        projections2.forEach(function(projection2) {\n            (0,_proj_transforms_js__WEBPACK_IMPORTED_MODULE_3__.add)(projection1, projection2, forwardTransform);\n            (0,_proj_transforms_js__WEBPACK_IMPORTED_MODULE_3__.add)(projection2, projection1, inverseTransform);\n        });\n    });\n}\n/**\n * Clear all cached projections and transforms.\n */ function clearAllProjections() {\n    (0,_proj_projections_js__WEBPACK_IMPORTED_MODULE_2__.clear)();\n    (0,_proj_transforms_js__WEBPACK_IMPORTED_MODULE_3__.clear)();\n}\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */ function createProjection(projection, defaultCode) {\n    if (!projection) {\n        return get(defaultCode);\n    }\n    if (typeof projection === \"string\") {\n        return get(projection);\n    }\n    return /** @type {Projection} */ projection;\n}\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */ function createTransformFromCoordinateTransform(coordTransform) {\n    return(/**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [output] Output.\n     * @param {number} [dimension] Dimension.\n     * @return {Array<number>} Output.\n     */ function(input, output, dimension) {\n        const length = input.length;\n        dimension = dimension !== undefined ? dimension : 2;\n        output = output !== undefined ? output : new Array(length);\n        for(let i = 0; i < length; i += dimension){\n            const point = coordTransform(input.slice(i, i + dimension));\n            const pointLength = point.length;\n            for(let j = 0, jj = dimension; j < jj; ++j){\n                output[i + j] = j >= pointLength ? input[i + j] : point[j];\n            }\n        }\n        return output;\n    });\n}\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\n *     source.\n * @api\n */ function addCoordinateTransforms(source, destination, forward, inverse) {\n    const sourceProj = get(source);\n    const destProj = get(destination);\n    (0,_proj_transforms_js__WEBPACK_IMPORTED_MODULE_3__.add)(sourceProj, destProj, createTransformFromCoordinateTransform(forward));\n    (0,_proj_transforms_js__WEBPACK_IMPORTED_MODULE_3__.add)(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));\n}\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike} [projection] Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */ function fromLonLat(coordinate, projection) {\n    disableCoordinateWarning();\n    return transform(coordinate, \"EPSG:4326\", projection !== undefined ? projection : \"EPSG:3857\");\n}\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike} [projection] Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */ function toLonLat(coordinate, projection) {\n    const lonLat = transform(coordinate, projection !== undefined ? projection : \"EPSG:3857\", \"EPSG:4326\");\n    const lon = lonLat[0];\n    if (lon < -180 || lon > 180) {\n        lonLat[0] = (0,_math_js__WEBPACK_IMPORTED_MODULE_5__.modulo)(lon + 180, 360) - 180;\n    }\n    return lonLat;\n}\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */ function equivalent(projection1, projection2) {\n    if (projection1 === projection2) {\n        return true;\n    }\n    const equalUnits = projection1.getUnits() === projection2.getUnits();\n    if (projection1.getCode() === projection2.getCode()) {\n        return equalUnits;\n    }\n    const transformFunc = getTransformFromProjections(projection1, projection2);\n    return transformFunc === cloneTransform && equalUnits;\n}\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */ function getTransformFromProjections(sourceProjection, destinationProjection) {\n    const sourceCode = sourceProjection.getCode();\n    const destinationCode = destinationProjection.getCode();\n    let transformFunc = (0,_proj_transforms_js__WEBPACK_IMPORTED_MODULE_3__.get)(sourceCode, destinationCode);\n    if (!transformFunc) {\n        transformFunc = identityTransform;\n    }\n    return transformFunc;\n}\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */ function getTransform(source, destination) {\n    const sourceProjection = get(source);\n    const destinationProjection = get(destination);\n    return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj.transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */ function transform(coordinate, source, destination) {\n    const transformFunc = getTransform(source, destination);\n    return transformFunc(coordinate, undefined, coordinate.length);\n}\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */ function transformExtent(extent, source, destination, stops) {\n    const transformFunc = getTransform(source, destination);\n    return (0,_extent_js__WEBPACK_IMPORTED_MODULE_6__.applyTransform)(extent, transformFunc, undefined, stops);\n}\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */ function transformWithProjections(point, sourceProjection, destinationProjection) {\n    const transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);\n    return transformFunc(point);\n}\n/**\n * @type {Projection|null}\n */ let userProjection = null;\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * This includes all API methods except for those interacting with tile grids,\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\n * @param {ProjectionLike} projection The user projection.\n * @api\n */ function setUserProjection(projection) {\n    userProjection = get(projection);\n}\n/**\n * Clear the user projection if set.\n * @api\n */ function clearUserProjection() {\n    userProjection = null;\n}\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * @return {Projection|null} The user projection (or null if not set).\n * @api\n */ function getUserProjection() {\n    return userProjection;\n}\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.\n * This includes all API methods except for those interacting with tile grids,\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\n * @api\n */ function useGeographic() {\n    setUserProjection(\"EPSG:4326\");\n}\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @return {Array<number>} The input coordinate in the user projection.\n */ function toUserCoordinate(coordinate, sourceProjection) {\n    if (!userProjection) {\n        return coordinate;\n    }\n    return transform(coordinate, sourceProjection, userProjection);\n}\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {Array<number>} The input coordinate transformed.\n */ function fromUserCoordinate(coordinate, destProjection) {\n    if (!userProjection) {\n        if (showCoordinateWarning && !(0,_coordinate_js__WEBPACK_IMPORTED_MODULE_7__.equals)(coordinate, [\n            0,\n            0\n        ]) && coordinate[0] >= -180 && coordinate[0] <= 180 && coordinate[1] >= -90 && coordinate[1] <= 90) {\n            showCoordinateWarning = false;\n            (0,_console_js__WEBPACK_IMPORTED_MODULE_8__.warn)(\"Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.\");\n        }\n        return coordinate;\n    }\n    return transform(coordinate, userProjection, destProjection);\n}\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\n */ function toUserExtent(extent, sourceProjection) {\n    if (!userProjection) {\n        return extent;\n    }\n    return transformExtent(extent, sourceProjection, userProjection);\n}\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\n */ function fromUserExtent(extent, destProjection) {\n    if (!userProjection) {\n        return extent;\n    }\n    return transformExtent(extent, userProjection, destProjection);\n}\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in input projection units per pixel.\n * @param {ProjectionLike} sourceProjection The input projection.\n * @return {number} Resolution in user projection units per pixel.\n */ function toUserResolution(resolution, sourceProjection) {\n    if (!userProjection) {\n        return resolution;\n    }\n    const sourceMetersPerUnit = get(sourceProjection).getMetersPerUnit();\n    const userMetersPerUnit = userProjection.getMetersPerUnit();\n    return sourceMetersPerUnit && userMetersPerUnit ? resolution * sourceMetersPerUnit / userMetersPerUnit : resolution;\n}\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in user projection units per pixel.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {number} Resolution in destination projection units per pixel.\n */ function fromUserResolution(resolution, destProjection) {\n    if (!userProjection) {\n        return resolution;\n    }\n    const destMetersPerUnit = get(destProjection).getMetersPerUnit();\n    const userMetersPerUnit = userProjection.getMetersPerUnit();\n    return destMetersPerUnit && userMetersPerUnit ? resolution * userMetersPerUnit / destMetersPerUnit : resolution;\n}\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destination).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destination).\n */ function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n    return function(coord) {\n        let transformed, worldsAway;\n        if (sourceProj.canWrapX()) {\n            const sourceExtent = sourceProj.getExtent();\n            const sourceExtentWidth = (0,_extent_js__WEBPACK_IMPORTED_MODULE_6__.getWidth)(sourceExtent);\n            coord = coord.slice(0);\n            worldsAway = (0,_coordinate_js__WEBPACK_IMPORTED_MODULE_7__.getWorldsAway)(coord, sourceProj, sourceExtentWidth);\n            if (worldsAway) {\n                // Move x to the real world\n                coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n            }\n            coord[0] = (0,_math_js__WEBPACK_IMPORTED_MODULE_5__.clamp)(coord[0], sourceExtent[0], sourceExtent[2]);\n            coord[1] = (0,_math_js__WEBPACK_IMPORTED_MODULE_5__.clamp)(coord[1], sourceExtent[1], sourceExtent[3]);\n            transformed = transform(coord);\n        } else {\n            transformed = transform(coord);\n        }\n        if (worldsAway && destProj.canWrapX()) {\n            // Move transformed coordinate back to the offset world\n            transformed[0] += worldsAway * (0,_extent_js__WEBPACK_IMPORTED_MODULE_6__.getWidth)(destProj.getExtent());\n        }\n        return transformed;\n    };\n}\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */ function addCommon() {\n    // Add transformations that don't alter coordinates to convert within set of\n    // projections with equal meaning.\n    addEquivalentProjections(_proj_epsg3857_js__WEBPACK_IMPORTED_MODULE_9__.PROJECTIONS);\n    addEquivalentProjections(_proj_epsg4326_js__WEBPACK_IMPORTED_MODULE_10__.PROJECTIONS);\n    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n    // coordinates and back.\n    addEquivalentTransforms(_proj_epsg4326_js__WEBPACK_IMPORTED_MODULE_10__.PROJECTIONS, _proj_epsg3857_js__WEBPACK_IMPORTED_MODULE_9__.PROJECTIONS, _proj_epsg3857_js__WEBPACK_IMPORTED_MODULE_9__.fromEPSG4326, _proj_epsg3857_js__WEBPACK_IMPORTED_MODULE_9__.toEPSG4326);\n}\naddCommon();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/proj.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/proj/Projection.js":
/*!********************************************!*\
  !*** ./node_modules/ol/proj/Projection.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Units_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Units.js */ \"(ssr)/./node_modules/ol/proj/Units.js\");\n/**\n * @module ol/proj/Projection\n */ \n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution} function will be used.\n */ /**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4.register} function.\n *\n * @api\n */ class Projection {\n    /**\n   * @param {Options} options Projection options.\n   */ constructor(options){\n        /**\n     * @private\n     * @type {string}\n     */ this.code_ = options.code;\n        /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").Units}\n     */ this.units_ = /** @type {import(\"./Units.js\").Units} */ options.units;\n        /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.extent_ = options.extent !== undefined ? options.extent : null;\n        /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.worldExtent_ = options.worldExtent !== undefined ? options.worldExtent : null;\n        /**\n     * @private\n     * @type {string}\n     */ this.axisOrientation_ = options.axisOrientation !== undefined ? options.axisOrientation : \"enu\";\n        /**\n     * @private\n     * @type {boolean}\n     */ this.global_ = options.global !== undefined ? options.global : false;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.canWrapX_ = !!(this.global_ && this.extent_);\n        /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */ this.getPointResolutionFunc_ = options.getPointResolution;\n        /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */ this.defaultTileGrid_ = null;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.metersPerUnit_ = options.metersPerUnit;\n    }\n    /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */ canWrapX() {\n        return this.canWrapX_;\n    }\n    /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */ getCode() {\n        return this.code_;\n    }\n    /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */ getExtent() {\n        return this.extent_;\n    }\n    /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").Units} Units.\n   * @api\n   */ getUnits() {\n        return this.units_;\n    }\n    /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */ getMetersPerUnit() {\n        return this.metersPerUnit_ || _Units_js__WEBPACK_IMPORTED_MODULE_0__.METERS_PER_UNIT[this.units_];\n    }\n    /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */ getWorldExtent() {\n        return this.worldExtent_;\n    }\n    /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */ getAxisOrientation() {\n        return this.axisOrientation_;\n    }\n    /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */ isGlobal() {\n        return this.global_;\n    }\n    /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */ setGlobal(global) {\n        this.global_ = global;\n        this.canWrapX_ = !!(global && this.extent_);\n    }\n    /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */ getDefaultTileGrid() {\n        return this.defaultTileGrid_;\n    }\n    /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */ setDefaultTileGrid(tileGrid) {\n        this.defaultTileGrid_ = tileGrid;\n    }\n    /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */ setExtent(extent) {\n        this.extent_ = extent;\n        this.canWrapX_ = !!(this.global_ && extent);\n    }\n    /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */ setWorldExtent(worldExtent) {\n        this.worldExtent_ = worldExtent;\n    }\n    /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */ setGetPointResolution(func) {\n        this.getPointResolutionFunc_ = func;\n    }\n    /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */ getPointResolutionFunc() {\n        return this.getPointResolutionFunc_;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Projection);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/proj/Projection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/proj/Units.js":
/*!***************************************!*\
  !*** ./node_modules/ol/proj/Units.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   METERS_PER_UNIT: () => (/* binding */ METERS_PER_UNIT),\n/* harmony export */   fromCode: () => (/* binding */ fromCode)\n/* harmony export */ });\n/**\n * @module ol/proj/Units\n */ /**\n * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units\n * Projection units.\n */ /**\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\n * @type {Object<number, Units>}\n */ const unitByCode = {\n    \"9001\": \"m\",\n    \"9002\": \"ft\",\n    \"9003\": \"us-ft\",\n    \"9101\": \"radians\",\n    \"9102\": \"degrees\"\n};\n/**\n * @param {number} code Unit code.\n * @return {Units} Units.\n */ function fromCode(code) {\n    return unitByCode[code];\n}\n/**\n * @typedef {Object} MetersPerUnitLookup\n * @property {number} radians Radians\n * @property {number} degrees Degrees\n * @property {number} ft  Feet\n * @property {number} m Meters\n * @property {number} us-ft US feet\n */ /**\n * Meters per unit lookup table.\n * @const\n * @type {MetersPerUnitLookup}\n * @api\n */ const METERS_PER_UNIT = {\n    // use the radius of the Normal sphere\n    \"radians\": 6370997 / (2 * Math.PI),\n    \"degrees\": 2 * Math.PI * 6370997 / 360,\n    \"ft\": 0.3048,\n    \"m\": 1,\n    \"us-ft\": 1200 / 3937\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2wvcHJvai9Vbml0cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBOztDQUVDLEdBRUQ7OztDQUdDLEdBRUQ7OztDQUdDLEdBQ0QsTUFBTUEsYUFBYTtJQUNqQixRQUFRO0lBQ1IsUUFBUTtJQUNSLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtBQUNWO0FBRUE7OztDQUdDLEdBQ00sU0FBU0MsU0FBU0MsSUFBSTtJQUMzQixPQUFPRixVQUFVLENBQUNFLEtBQUs7QUFDekI7QUFFQTs7Ozs7OztDQU9DLEdBRUQ7Ozs7O0NBS0MsR0FDTSxNQUFNQyxrQkFBa0I7SUFDN0Isc0NBQXNDO0lBQ3RDLFdBQVcsVUFBVyxLQUFJQyxLQUFLQyxFQUFFO0lBQ2pDLFdBQVcsSUFBS0QsS0FBS0MsRUFBRSxHQUFHLFVBQVc7SUFDckMsTUFBTTtJQUNOLEtBQUs7SUFDTCxTQUFTLE9BQU87QUFDbEIsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL21hcC8uL25vZGVfbW9kdWxlcy9vbC9wcm9qL1VuaXRzLmpzPzM3OTgiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbW9kdWxlIG9sL3Byb2ovVW5pdHNcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHsncmFkaWFucycgfCAnZGVncmVlcycgfCAnZnQnIHwgJ20nIHwgJ3BpeGVscycgfCAndGlsZS1waXhlbHMnIHwgJ3VzLWZ0J30gVW5pdHNcbiAqIFByb2plY3Rpb24gdW5pdHMuXG4gKi9cblxuLyoqXG4gKiBTZWUgaHR0cDovL2R1ZmYuZXNzLndhc2hpbmd0b24uZWR1L2RhdGEvcmFzdGVyL2RyZy9kb2NzL2dlb3RpZmYudHh0XG4gKiBAdHlwZSB7T2JqZWN0PG51bWJlciwgVW5pdHM+fVxuICovXG5jb25zdCB1bml0QnlDb2RlID0ge1xuICAnOTAwMSc6ICdtJyxcbiAgJzkwMDInOiAnZnQnLFxuICAnOTAwMyc6ICd1cy1mdCcsXG4gICc5MTAxJzogJ3JhZGlhbnMnLFxuICAnOTEwMic6ICdkZWdyZWVzJyxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGUgVW5pdCBjb2RlLlxuICogQHJldHVybiB7VW5pdHN9IFVuaXRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUNvZGUoY29kZSkge1xuICByZXR1cm4gdW5pdEJ5Q29kZVtjb2RlXTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBNZXRlcnNQZXJVbml0TG9va3VwXG4gKiBAcHJvcGVydHkge251bWJlcn0gcmFkaWFucyBSYWRpYW5zXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGVncmVlcyBEZWdyZWVzXG4gKiBAcHJvcGVydHkge251bWJlcn0gZnQgIEZlZXRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtIE1ldGVyc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IHVzLWZ0IFVTIGZlZXRcbiAqL1xuXG4vKipcbiAqIE1ldGVycyBwZXIgdW5pdCBsb29rdXAgdGFibGUuXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtNZXRlcnNQZXJVbml0TG9va3VwfVxuICogQGFwaVxuICovXG5leHBvcnQgY29uc3QgTUVURVJTX1BFUl9VTklUID0ge1xuICAvLyB1c2UgdGhlIHJhZGl1cyBvZiB0aGUgTm9ybWFsIHNwaGVyZVxuICAncmFkaWFucyc6IDYzNzA5OTcgLyAoMiAqIE1hdGguUEkpLFxuICAnZGVncmVlcyc6ICgyICogTWF0aC5QSSAqIDYzNzA5OTcpIC8gMzYwLFxuICAnZnQnOiAwLjMwNDgsXG4gICdtJzogMSxcbiAgJ3VzLWZ0JzogMTIwMCAvIDM5MzcsXG59O1xuIl0sIm5hbWVzIjpbInVuaXRCeUNvZGUiLCJmcm9tQ29kZSIsImNvZGUiLCJNRVRFUlNfUEVSX1VOSVQiLCJNYXRoIiwiUEkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/proj/Units.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/proj/epsg3857.js":
/*!******************************************!*\
  !*** ./node_modules/ol/proj/epsg3857.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXTENT: () => (/* binding */ EXTENT),\n/* harmony export */   HALF_SIZE: () => (/* binding */ HALF_SIZE),\n/* harmony export */   MAX_SAFE_Y: () => (/* binding */ MAX_SAFE_Y),\n/* harmony export */   PROJECTIONS: () => (/* binding */ PROJECTIONS),\n/* harmony export */   RADIUS: () => (/* binding */ RADIUS),\n/* harmony export */   WORLD_EXTENT: () => (/* binding */ WORLD_EXTENT),\n/* harmony export */   fromEPSG4326: () => (/* binding */ fromEPSG4326),\n/* harmony export */   toEPSG4326: () => (/* binding */ toEPSG4326)\n/* harmony export */ });\n/* harmony import */ var _Projection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Projection.js */ \"(ssr)/./node_modules/ol/proj/Projection.js\");\n/**\n * @module ol/proj/epsg3857\n */ \n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */ const RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */ const HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */ const EXTENT = [\n    -HALF_SIZE,\n    -HALF_SIZE,\n    HALF_SIZE,\n    HALF_SIZE\n];\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */ const WORLD_EXTENT = [\n    -180,\n    -85,\n    180,\n    85\n];\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */ const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */ class EPSG3857Projection extends _Projection_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n   * @param {string} code Code.\n   */ constructor(code){\n        super({\n            code: code,\n            units: \"m\",\n            extent: EXTENT,\n            global: true,\n            worldExtent: WORLD_EXTENT,\n            getPointResolution: function(resolution, point) {\n                return resolution / Math.cosh(point[1] / RADIUS);\n            }\n        });\n    }\n}\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */ const PROJECTIONS = [\n    new EPSG3857Projection(\"EPSG:3857\"),\n    new EPSG3857Projection(\"EPSG:102100\"),\n    new EPSG3857Projection(\"EPSG:102113\"),\n    new EPSG3857Projection(\"EPSG:900913\"),\n    new EPSG3857Projection(\"http://www.opengis.net/def/crs/EPSG/0/3857\"),\n    new EPSG3857Projection(\"http://www.opengis.net/gml/srs/epsg.xml#3857\")\n];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */ function fromEPSG4326(input, output, dimension) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        } else {\n            output = new Array(length);\n        }\n    }\n    for(let i = 0; i < length; i += dimension){\n        output[i] = HALF_SIZE * input[i] / 180;\n        let y = RADIUS * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n        if (y > MAX_SAFE_Y) {\n            y = MAX_SAFE_Y;\n        } else if (y < -MAX_SAFE_Y) {\n            y = -MAX_SAFE_Y;\n        }\n        output[i + 1] = y;\n    }\n    return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */ function toEPSG4326(input, output, dimension) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    if (output === undefined) {\n        if (dimension > 2) {\n            // preserve values beyond second dimension\n            output = input.slice();\n        } else {\n            output = new Array(length);\n        }\n    }\n    for(let i = 0; i < length; i += dimension){\n        output[i] = 180 * input[i] / HALF_SIZE;\n        output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n    }\n    return output;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2wvcHJvai9lcHNnMzg1Ny5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQTs7Q0FFQyxHQUN3QztBQUV6Qzs7Ozs7Q0FLQyxHQUNNLE1BQU1DLFNBQVMsUUFBUTtBQUU5Qjs7O0NBR0MsR0FDTSxNQUFNQyxZQUFZQyxLQUFLQyxFQUFFLEdBQUdILE9BQU87QUFFMUM7OztDQUdDLEdBQ00sTUFBTUksU0FBUztJQUFDLENBQUNIO0lBQVcsQ0FBQ0E7SUFBV0E7SUFBV0E7Q0FBVSxDQUFDO0FBRXJFOzs7Q0FHQyxHQUNNLE1BQU1JLGVBQWU7SUFBQyxDQUFDO0lBQUssQ0FBQztJQUFJO0lBQUs7Q0FBRyxDQUFDO0FBRWpEOzs7O0NBSUMsR0FDTSxNQUFNQyxhQUFhTixTQUFTRSxLQUFLSyxHQUFHLENBQUNMLEtBQUtNLEdBQUcsQ0FBQ04sS0FBS0MsRUFBRSxHQUFHLElBQUk7QUFFbkU7OztDQUdDLEdBQ0QsTUFBTU0sMkJBQTJCVixzREFBVUE7SUFDekM7O0dBRUMsR0FDRFcsWUFBWUMsSUFBSSxDQUFFO1FBQ2hCLEtBQUssQ0FBQztZQUNKQSxNQUFNQTtZQUNOQyxPQUFPO1lBQ1BDLFFBQVFUO1lBQ1JVLFFBQVE7WUFDUkMsYUFBYVY7WUFDYlcsb0JBQW9CLFNBQVVDLFVBQVUsRUFBRUMsS0FBSztnQkFDN0MsT0FBT0QsYUFBYWYsS0FBS2lCLElBQUksQ0FBQ0QsS0FBSyxDQUFDLEVBQUUsR0FBR2xCO1lBQzNDO1FBQ0Y7SUFDRjtBQUNGO0FBRUE7Ozs7O0NBS0MsR0FDTSxNQUFNb0IsY0FBYztJQUN6QixJQUFJWCxtQkFBbUI7SUFDdkIsSUFBSUEsbUJBQW1CO0lBQ3ZCLElBQUlBLG1CQUFtQjtJQUN2QixJQUFJQSxtQkFBbUI7SUFDdkIsSUFBSUEsbUJBQW1CO0lBQ3ZCLElBQUlBLG1CQUFtQjtDQUN4QixDQUFDO0FBRUY7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNZLGFBQWFDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxTQUFTO0lBQ25ELE1BQU1DLFNBQVNILE1BQU1HLE1BQU07SUFDM0JELFlBQVlBLFlBQVksSUFBSUEsWUFBWTtJQUN4QyxJQUFJRCxXQUFXRyxXQUFXO1FBQ3hCLElBQUlGLFlBQVksR0FBRztZQUNqQiwwQ0FBMEM7WUFDMUNELFNBQVNELE1BQU1LLEtBQUs7UUFDdEIsT0FBTztZQUNMSixTQUFTLElBQUlLLE1BQU1IO1FBQ3JCO0lBQ0Y7SUFDQSxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUosUUFBUUksS0FBS0wsVUFBVztRQUMxQ0QsTUFBTSxDQUFDTSxFQUFFLEdBQUcsWUFBYVAsS0FBSyxDQUFDTyxFQUFFLEdBQUk7UUFDckMsSUFBSUMsSUFBSTlCLFNBQVNFLEtBQUtLLEdBQUcsQ0FBQ0wsS0FBS00sR0FBRyxDQUFDLEtBQU1MLEVBQUUsR0FBSSxFQUFDbUIsS0FBSyxDQUFDTyxJQUFJLEVBQUUsR0FBRyxFQUFDLElBQU07UUFDdEUsSUFBSUMsSUFBSXhCLFlBQVk7WUFDbEJ3QixJQUFJeEI7UUFDTixPQUFPLElBQUl3QixJQUFJLENBQUN4QixZQUFZO1lBQzFCd0IsSUFBSSxDQUFDeEI7UUFDUDtRQUNBaUIsTUFBTSxDQUFDTSxJQUFJLEVBQUUsR0FBR0M7SUFDbEI7SUFDQSxPQUFPUDtBQUNUO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNRLFdBQVdULEtBQUssRUFBRUMsTUFBTSxFQUFFQyxTQUFTO0lBQ2pELE1BQU1DLFNBQVNILE1BQU1HLE1BQU07SUFDM0JELFlBQVlBLFlBQVksSUFBSUEsWUFBWTtJQUN4QyxJQUFJRCxXQUFXRyxXQUFXO1FBQ3hCLElBQUlGLFlBQVksR0FBRztZQUNqQiwwQ0FBMEM7WUFDMUNELFNBQVNELE1BQU1LLEtBQUs7UUFDdEIsT0FBTztZQUNMSixTQUFTLElBQUlLLE1BQU1IO1FBQ3JCO0lBQ0Y7SUFDQSxJQUFLLElBQUlJLElBQUksR0FBR0EsSUFBSUosUUFBUUksS0FBS0wsVUFBVztRQUMxQ0QsTUFBTSxDQUFDTSxFQUFFLEdBQUcsTUFBT1AsS0FBSyxDQUFDTyxFQUFFLEdBQUk1QjtRQUMvQnNCLE1BQU0sQ0FBQ00sSUFBSSxFQUFFLEdBQ1gsTUFBTzNCLEtBQUs4QixJQUFJLENBQUM5QixLQUFLK0IsR0FBRyxDQUFDWCxLQUFLLENBQUNPLElBQUksRUFBRSxHQUFHN0IsV0FBWUUsS0FBS0MsRUFBRSxHQUFHO0lBQ25FO0lBQ0EsT0FBT29CO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXAvLi9ub2RlX21vZHVsZXMvb2wvcHJvai9lcHNnMzg1Ny5qcz9mMmVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1vZHVsZSBvbC9wcm9qL2Vwc2czODU3XG4gKi9cbmltcG9ydCBQcm9qZWN0aW9uIGZyb20gJy4vUHJvamVjdGlvbi5qcyc7XG5cbi8qKlxuICogUmFkaXVzIG9mIFdHUzg0IHNwaGVyZVxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge251bWJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IFJBRElVUyA9IDYzNzgxMzc7XG5cbi8qKlxuICogQGNvbnN0XG4gKiBAdHlwZSB7bnVtYmVyfVxuICovXG5leHBvcnQgY29uc3QgSEFMRl9TSVpFID0gTWF0aC5QSSAqIFJBRElVUztcblxuLyoqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtpbXBvcnQoXCIuLi9leHRlbnQuanNcIikuRXh0ZW50fVxuICovXG5leHBvcnQgY29uc3QgRVhURU5UID0gWy1IQUxGX1NJWkUsIC1IQUxGX1NJWkUsIEhBTEZfU0laRSwgSEFMRl9TSVpFXTtcblxuLyoqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtpbXBvcnQoXCIuLi9leHRlbnQuanNcIikuRXh0ZW50fVxuICovXG5leHBvcnQgY29uc3QgV09STERfRVhURU5UID0gWy0xODAsIC04NSwgMTgwLCA4NV07XG5cbi8qKlxuICogTWF4aW11bSBzYWZlIHZhbHVlIGluIHkgZGlyZWN0aW9uXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNQVhfU0FGRV9ZID0gUkFESVVTICogTWF0aC5sb2coTWF0aC50YW4oTWF0aC5QSSAvIDIpKTtcblxuLyoqXG4gKiBAY2xhc3NkZXNjXG4gKiBQcm9qZWN0aW9uIG9iamVjdCBmb3Igd2ViL3NwaGVyaWNhbCBNZXJjYXRvciAoRVBTRzozODU3KS5cbiAqL1xuY2xhc3MgRVBTRzM4NTdQcm9qZWN0aW9uIGV4dGVuZHMgUHJvamVjdGlvbiB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29kZSBDb2RlLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY29kZSkge1xuICAgIHN1cGVyKHtcbiAgICAgIGNvZGU6IGNvZGUsXG4gICAgICB1bml0czogJ20nLFxuICAgICAgZXh0ZW50OiBFWFRFTlQsXG4gICAgICBnbG9iYWw6IHRydWUsXG4gICAgICB3b3JsZEV4dGVudDogV09STERfRVhURU5ULFxuICAgICAgZ2V0UG9pbnRSZXNvbHV0aW9uOiBmdW5jdGlvbiAocmVzb2x1dGlvbiwgcG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdXRpb24gLyBNYXRoLmNvc2gocG9pbnRbMV0gLyBSQURJVVMpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFByb2plY3Rpb25zIGVxdWFsIHRvIEVQU0c6Mzg1Ny5cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtBcnJheTxpbXBvcnQoXCIuL1Byb2plY3Rpb24uanNcIikuZGVmYXVsdD59XG4gKi9cbmV4cG9ydCBjb25zdCBQUk9KRUNUSU9OUyA9IFtcbiAgbmV3IEVQU0czODU3UHJvamVjdGlvbignRVBTRzozODU3JyksXG4gIG5ldyBFUFNHMzg1N1Byb2plY3Rpb24oJ0VQU0c6MTAyMTAwJyksXG4gIG5ldyBFUFNHMzg1N1Byb2plY3Rpb24oJ0VQU0c6MTAyMTEzJyksXG4gIG5ldyBFUFNHMzg1N1Byb2plY3Rpb24oJ0VQU0c6OTAwOTEzJyksXG4gIG5ldyBFUFNHMzg1N1Byb2plY3Rpb24oJ2h0dHA6Ly93d3cub3Blbmdpcy5uZXQvZGVmL2Nycy9FUFNHLzAvMzg1NycpLFxuICBuZXcgRVBTRzM4NTdQcm9qZWN0aW9uKCdodHRwOi8vd3d3Lm9wZW5naXMubmV0L2dtbC9zcnMvZXBzZy54bWwjMzg1NycpLFxuXTtcblxuLyoqXG4gKiBUcmFuc2Zvcm1hdGlvbiBmcm9tIEVQU0c6NDMyNiB0byBFUFNHOjM4NTcuXG4gKlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBpbnB1dCBJbnB1dCBhcnJheSBvZiBjb29yZGluYXRlIHZhbHVlcy5cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW291dHB1dF0gT3V0cHV0IGFycmF5IG9mIGNvb3JkaW5hdGUgdmFsdWVzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtkaW1lbnNpb25dIERpbWVuc2lvbiAoZGVmYXVsdCBpcyBgMmApLlxuICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn0gT3V0cHV0IGFycmF5IG9mIGNvb3JkaW5hdGUgdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbUVQU0c0MzI2KGlucHV0LCBvdXRwdXQsIGRpbWVuc2lvbikge1xuICBjb25zdCBsZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gIGRpbWVuc2lvbiA9IGRpbWVuc2lvbiA+IDEgPyBkaW1lbnNpb24gOiAyO1xuICBpZiAob3V0cHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoZGltZW5zaW9uID4gMikge1xuICAgICAgLy8gcHJlc2VydmUgdmFsdWVzIGJleW9uZCBzZWNvbmQgZGltZW5zaW9uXG4gICAgICBvdXRwdXQgPSBpbnB1dC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB9XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gZGltZW5zaW9uKSB7XG4gICAgb3V0cHV0W2ldID0gKEhBTEZfU0laRSAqIGlucHV0W2ldKSAvIDE4MDtcbiAgICBsZXQgeSA9IFJBRElVUyAqIE1hdGgubG9nKE1hdGgudGFuKChNYXRoLlBJICogKCtpbnB1dFtpICsgMV0gKyA5MCkpIC8gMzYwKSk7XG4gICAgaWYgKHkgPiBNQVhfU0FGRV9ZKSB7XG4gICAgICB5ID0gTUFYX1NBRkVfWTtcbiAgICB9IGVsc2UgaWYgKHkgPCAtTUFYX1NBRkVfWSkge1xuICAgICAgeSA9IC1NQVhfU0FGRV9ZO1xuICAgIH1cbiAgICBvdXRwdXRbaSArIDFdID0geTtcbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufVxuXG4vKipcbiAqIFRyYW5zZm9ybWF0aW9uIGZyb20gRVBTRzozODU3IHRvIEVQU0c6NDMyNi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGlucHV0IElucHV0IGFycmF5IG9mIGNvb3JkaW5hdGUgdmFsdWVzLlxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBbb3V0cHV0XSBPdXRwdXQgYXJyYXkgb2YgY29vcmRpbmF0ZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gW2RpbWVuc2lvbl0gRGltZW5zaW9uIChkZWZhdWx0IGlzIGAyYCkuXG4gKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fSBPdXRwdXQgYXJyYXkgb2YgY29vcmRpbmF0ZSB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0VQU0c0MzI2KGlucHV0LCBvdXRwdXQsIGRpbWVuc2lvbikge1xuICBjb25zdCBsZW5ndGggPSBpbnB1dC5sZW5ndGg7XG4gIGRpbWVuc2lvbiA9IGRpbWVuc2lvbiA+IDEgPyBkaW1lbnNpb24gOiAyO1xuICBpZiAob3V0cHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoZGltZW5zaW9uID4gMikge1xuICAgICAgLy8gcHJlc2VydmUgdmFsdWVzIGJleW9uZCBzZWNvbmQgZGltZW5zaW9uXG4gICAgICBvdXRwdXQgPSBpbnB1dC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRwdXQgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB9XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gZGltZW5zaW9uKSB7XG4gICAgb3V0cHV0W2ldID0gKDE4MCAqIGlucHV0W2ldKSAvIEhBTEZfU0laRTtcbiAgICBvdXRwdXRbaSArIDFdID1cbiAgICAgICgzNjAgKiBNYXRoLmF0YW4oTWF0aC5leHAoaW5wdXRbaSArIDFdIC8gUkFESVVTKSkpIC8gTWF0aC5QSSAtIDkwO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG4iXSwibmFtZXMiOlsiUHJvamVjdGlvbiIsIlJBRElVUyIsIkhBTEZfU0laRSIsIk1hdGgiLCJQSSIsIkVYVEVOVCIsIldPUkxEX0VYVEVOVCIsIk1BWF9TQUZFX1kiLCJsb2ciLCJ0YW4iLCJFUFNHMzg1N1Byb2plY3Rpb24iLCJjb25zdHJ1Y3RvciIsImNvZGUiLCJ1bml0cyIsImV4dGVudCIsImdsb2JhbCIsIndvcmxkRXh0ZW50IiwiZ2V0UG9pbnRSZXNvbHV0aW9uIiwicmVzb2x1dGlvbiIsInBvaW50IiwiY29zaCIsIlBST0pFQ1RJT05TIiwiZnJvbUVQU0c0MzI2IiwiaW5wdXQiLCJvdXRwdXQiLCJkaW1lbnNpb24iLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJzbGljZSIsIkFycmF5IiwiaSIsInkiLCJ0b0VQU0c0MzI2IiwiYXRhbiIsImV4cCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/proj/epsg3857.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/proj/epsg4326.js":
/*!******************************************!*\
  !*** ./node_modules/ol/proj/epsg4326.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EXTENT: () => (/* binding */ EXTENT),\n/* harmony export */   METERS_PER_UNIT: () => (/* binding */ METERS_PER_UNIT),\n/* harmony export */   PROJECTIONS: () => (/* binding */ PROJECTIONS),\n/* harmony export */   RADIUS: () => (/* binding */ RADIUS)\n/* harmony export */ });\n/* harmony import */ var _Projection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Projection.js */ \"(ssr)/./node_modules/ol/proj/Projection.js\");\n/**\n * @module ol/proj/epsg4326\n */ \n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */ const RADIUS = 6378137;\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */ const EXTENT = [\n    -180,\n    -90,\n    180,\n    90\n];\n/**\n * @const\n * @type {number}\n */ const METERS_PER_UNIT = Math.PI * RADIUS / 180;\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */ class EPSG4326Projection extends _Projection_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /**\n   * @param {string} code Code.\n   * @param {string} [axisOrientation] Axis orientation.\n   */ constructor(code, axisOrientation){\n        super({\n            code: code,\n            units: \"degrees\",\n            extent: EXTENT,\n            axisOrientation: axisOrientation,\n            global: true,\n            metersPerUnit: METERS_PER_UNIT,\n            worldExtent: EXTENT\n        });\n    }\n}\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */ const PROJECTIONS = [\n    new EPSG4326Projection(\"CRS:84\"),\n    new EPSG4326Projection(\"EPSG:4326\", \"neu\"),\n    new EPSG4326Projection(\"urn:ogc:def:crs:OGC:1.3:CRS84\"),\n    new EPSG4326Projection(\"urn:ogc:def:crs:OGC:2:84\"),\n    new EPSG4326Projection(\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"),\n    new EPSG4326Projection(\"http://www.opengis.net/gml/srs/epsg.xml#4326\", \"neu\"),\n    new EPSG4326Projection(\"http://www.opengis.net/def/crs/EPSG/0/4326\", \"neu\")\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2wvcHJvai9lcHNnNDMyNi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztDQUVDLEdBQ3dDO0FBRXpDOzs7OztDQUtDLEdBQ00sTUFBTUMsU0FBUyxRQUFRO0FBRTlCOzs7OztDQUtDLEdBQ00sTUFBTUMsU0FBUztJQUFDLENBQUM7SUFBSyxDQUFDO0lBQUk7SUFBSztDQUFHLENBQUM7QUFFM0M7OztDQUdDLEdBQ00sTUFBTUMsa0JBQWtCLEtBQU1FLEVBQUUsR0FBR0osU0FBVSxJQUFJO0FBRXhEOzs7Ozs7O0NBT0MsR0FDRCxNQUFNSywyQkFBMkJOLHNEQUFVQTtJQUN6Qzs7O0dBR0MsR0FDRE8sWUFBWUMsSUFBSSxFQUFFQyxlQUFlLENBQUU7UUFDakMsS0FBSyxDQUFDO1lBQ0pELE1BQU1BO1lBQ05FLE9BQU87WUFDUEMsUUFBUVQ7WUFDUk8saUJBQWlCQTtZQUNqQkcsUUFBUTtZQUNSQyxlQUFlVjtZQUNmVyxhQUFhWjtRQUNmO0lBQ0Y7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ00sTUFBTWEsY0FBYztJQUN6QixJQUFJVCxtQkFBbUI7SUFDdkIsSUFBSUEsbUJBQW1CLGFBQWE7SUFDcEMsSUFBSUEsbUJBQW1CO0lBQ3ZCLElBQUlBLG1CQUFtQjtJQUN2QixJQUFJQSxtQkFBbUI7SUFDdkIsSUFBSUEsbUJBQW1CLGdEQUFnRDtJQUN2RSxJQUFJQSxtQkFBbUIsOENBQThDO0NBQ3RFLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXAvLi9ub2RlX21vZHVsZXMvb2wvcHJvai9lcHNnNDMyNi5qcz9hOGE5Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1vZHVsZSBvbC9wcm9qL2Vwc2c0MzI2XG4gKi9cbmltcG9ydCBQcm9qZWN0aW9uIGZyb20gJy4vUHJvamVjdGlvbi5qcyc7XG5cbi8qKlxuICogU2VtaS1tYWpvciByYWRpdXMgb2YgdGhlIFdHUzg0IGVsbGlwc29pZC5cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBSQURJVVMgPSA2Mzc4MTM3O1xuXG4vKipcbiAqIEV4dGVudCBvZiB0aGUgRVBTRzo0MzI2IHByb2plY3Rpb24gd2hpY2ggaXMgdGhlIHdob2xlIHdvcmxkLlxuICpcbiAqIEBjb25zdFxuICogQHR5cGUge2ltcG9ydChcIi4uL2V4dGVudC5qc1wiKS5FeHRlbnR9XG4gKi9cbmV4cG9ydCBjb25zdCBFWFRFTlQgPSBbLTE4MCwgLTkwLCAxODAsIDkwXTtcblxuLyoqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBjb25zdCBNRVRFUlNfUEVSX1VOSVQgPSAoTWF0aC5QSSAqIFJBRElVUykgLyAxODA7XG5cbi8qKlxuICogQGNsYXNzZGVzY1xuICogUHJvamVjdGlvbiBvYmplY3QgZm9yIFdHUzg0IGdlb2dyYXBoaWMgY29vcmRpbmF0ZXMgKEVQU0c6NDMyNikuXG4gKlxuICogTm90ZSB0aGF0IE9wZW5MYXllcnMgZG9lcyBub3Qgc3RyaWN0bHkgY29tcGx5IHdpdGggdGhlIEVQU0cgZGVmaW5pdGlvbi5cbiAqIFRoZSBFUFNHIHJlZ2lzdHJ5IGRlZmluZXMgNDMyNiBhcyBhIENSUyBmb3IgTGF0aXR1ZGUsTG9uZ2l0dWRlICh5LHgpLlxuICogT3BlbkxheWVycyB0cmVhdHMgRVBTRzo0MzI2IGFzIGEgcHNldWRvLXByb2plY3Rpb24sIHdpdGggeCx5IGNvb3JkaW5hdGVzLlxuICovXG5jbGFzcyBFUFNHNDMyNlByb2plY3Rpb24gZXh0ZW5kcyBQcm9qZWN0aW9uIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIENvZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbYXhpc09yaWVudGF0aW9uXSBBeGlzIG9yaWVudGF0aW9uLlxuICAgKi9cbiAgY29uc3RydWN0b3IoY29kZSwgYXhpc09yaWVudGF0aW9uKSB7XG4gICAgc3VwZXIoe1xuICAgICAgY29kZTogY29kZSxcbiAgICAgIHVuaXRzOiAnZGVncmVlcycsXG4gICAgICBleHRlbnQ6IEVYVEVOVCxcbiAgICAgIGF4aXNPcmllbnRhdGlvbjogYXhpc09yaWVudGF0aW9uLFxuICAgICAgZ2xvYmFsOiB0cnVlLFxuICAgICAgbWV0ZXJzUGVyVW5pdDogTUVURVJTX1BFUl9VTklULFxuICAgICAgd29ybGRFeHRlbnQ6IEVYVEVOVCxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFByb2plY3Rpb25zIGVxdWFsIHRvIEVQU0c6NDMyNi5cbiAqXG4gKiBAY29uc3RcbiAqIEB0eXBlIHtBcnJheTxpbXBvcnQoXCIuL1Byb2plY3Rpb24uanNcIikuZGVmYXVsdD59XG4gKi9cbmV4cG9ydCBjb25zdCBQUk9KRUNUSU9OUyA9IFtcbiAgbmV3IEVQU0c0MzI2UHJvamVjdGlvbignQ1JTOjg0JyksXG4gIG5ldyBFUFNHNDMyNlByb2plY3Rpb24oJ0VQU0c6NDMyNicsICduZXUnKSxcbiAgbmV3IEVQU0c0MzI2UHJvamVjdGlvbigndXJuOm9nYzpkZWY6Y3JzOk9HQzoxLjM6Q1JTODQnKSxcbiAgbmV3IEVQU0c0MzI2UHJvamVjdGlvbigndXJuOm9nYzpkZWY6Y3JzOk9HQzoyOjg0JyksXG4gIG5ldyBFUFNHNDMyNlByb2plY3Rpb24oJ2h0dHA6Ly93d3cub3Blbmdpcy5uZXQvZGVmL2Nycy9PR0MvMS4zL0NSUzg0JyksXG4gIG5ldyBFUFNHNDMyNlByb2plY3Rpb24oJ2h0dHA6Ly93d3cub3Blbmdpcy5uZXQvZ21sL3Nycy9lcHNnLnhtbCM0MzI2JywgJ25ldScpLFxuICBuZXcgRVBTRzQzMjZQcm9qZWN0aW9uKCdodHRwOi8vd3d3Lm9wZW5naXMubmV0L2RlZi9jcnMvRVBTRy8wLzQzMjYnLCAnbmV1JyksXG5dO1xuIl0sIm5hbWVzIjpbIlByb2plY3Rpb24iLCJSQURJVVMiLCJFWFRFTlQiLCJNRVRFUlNfUEVSX1VOSVQiLCJNYXRoIiwiUEkiLCJFUFNHNDMyNlByb2plY3Rpb24iLCJjb25zdHJ1Y3RvciIsImNvZGUiLCJheGlzT3JpZW50YXRpb24iLCJ1bml0cyIsImV4dGVudCIsImdsb2JhbCIsIm1ldGVyc1BlclVuaXQiLCJ3b3JsZEV4dGVudCIsIlBST0pFQ1RJT05TIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/proj/epsg4326.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/proj/projections.js":
/*!*********************************************!*\
  !*** ./node_modules/ol/proj/projections.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   clear: () => (/* binding */ clear),\n/* harmony export */   get: () => (/* binding */ get)\n/* harmony export */ });\n/**\n * @module ol/proj/projections\n */ /**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */ let cache = {};\n/**\n * Clear the projections cache.\n */ function clear() {\n    cache = {};\n}\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default} The projection (if cached).\n */ function get(code) {\n    return cache[code] || cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, \"EPSG:$3\")] || null;\n}\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */ function add(code, projection) {\n    cache[code] = projection;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2wvcHJvai9wcm9qZWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Q0FFQyxHQUVEOztDQUVDLEdBQ0QsSUFBSUEsUUFBUSxDQUFDO0FBRWI7O0NBRUMsR0FDTSxTQUFTQztJQUNkRCxRQUFRLENBQUM7QUFDWDtBQUVBOzs7O0NBSUMsR0FDTSxTQUFTRSxJQUFJQyxJQUFJO0lBQ3RCLE9BQ0VILEtBQUssQ0FBQ0csS0FBSyxJQUNYSCxLQUFLLENBQUNHLEtBQUtDLE9BQU8sQ0FBQywwQ0FBMEMsV0FBVyxJQUN4RTtBQUVKO0FBRUE7Ozs7Q0FJQyxHQUNNLFNBQVNDLElBQUlGLElBQUksRUFBRUcsVUFBVTtJQUNsQ04sS0FBSyxDQUFDRyxLQUFLLEdBQUdHO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFwLy4vbm9kZV9tb2R1bGVzL29sL3Byb2ovcHJvamVjdGlvbnMuanM/NGM0NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgb2wvcHJvai9wcm9qZWN0aW9uc1xuICovXG5cbi8qKlxuICogQHR5cGUge09iamVjdDxzdHJpbmcsIGltcG9ydChcIi4vUHJvamVjdGlvbi5qc1wiKS5kZWZhdWx0Pn1cbiAqL1xubGV0IGNhY2hlID0ge307XG5cbi8qKlxuICogQ2xlYXIgdGhlIHByb2plY3Rpb25zIGNhY2hlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXIoKSB7XG4gIGNhY2hlID0ge307XG59XG5cbi8qKlxuICogR2V0IGEgY2FjaGVkIHByb2plY3Rpb24gYnkgY29kZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlIFRoZSBjb2RlIGZvciB0aGUgcHJvamVjdGlvbi5cbiAqIEByZXR1cm4ge2ltcG9ydChcIi4vUHJvamVjdGlvbi5qc1wiKS5kZWZhdWx0fSBUaGUgcHJvamVjdGlvbiAoaWYgY2FjaGVkKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldChjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgY2FjaGVbY29kZV0gfHxcbiAgICBjYWNoZVtjb2RlLnJlcGxhY2UoL3VybjooeC0pP29nYzpkZWY6Y3JzOkVQU0c6KC4qOik/KFxcdyspJC8sICdFUFNHOiQzJyldIHx8XG4gICAgbnVsbFxuICApO1xufVxuXG4vKipcbiAqIEFkZCBhIHByb2plY3Rpb24gdG8gdGhlIGNhY2hlLlxuICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgVGhlIHByb2plY3Rpb24gY29kZS5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi9Qcm9qZWN0aW9uLmpzXCIpLmRlZmF1bHR9IHByb2plY3Rpb24gVGhlIHByb2plY3Rpb24gdG8gY2FjaGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGQoY29kZSwgcHJvamVjdGlvbikge1xuICBjYWNoZVtjb2RlXSA9IHByb2plY3Rpb247XG59XG4iXSwibmFtZXMiOlsiY2FjaGUiLCJjbGVhciIsImdldCIsImNvZGUiLCJyZXBsYWNlIiwiYWRkIiwicHJvamVjdGlvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/proj/projections.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/proj/transforms.js":
/*!********************************************!*\
  !*** ./node_modules/ol/proj/transforms.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   add: () => (/* binding */ add),\n/* harmony export */   clear: () => (/* binding */ clear),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   remove: () => (/* binding */ remove)\n/* harmony export */ });\n/* harmony import */ var _obj_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../obj.js */ \"(ssr)/./node_modules/ol/obj.js\");\n/**\n * @module ol/proj/transforms\n */ \n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */ let transforms = {};\n/**\n * Clear the transform cache.\n */ function clear() {\n    transforms = {};\n}\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */ function add(source, destination, transformFn) {\n    const sourceCode = source.getCode();\n    const destinationCode = destination.getCode();\n    if (!(sourceCode in transforms)) {\n        transforms[sourceCode] = {};\n    }\n    transforms[sourceCode][destinationCode] = transformFn;\n}\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */ function remove(source, destination) {\n    const sourceCode = source.getCode();\n    const destinationCode = destination.getCode();\n    const transform = transforms[sourceCode][destinationCode];\n    delete transforms[sourceCode][destinationCode];\n    if ((0,_obj_js__WEBPACK_IMPORTED_MODULE_0__.isEmpty)(transforms[sourceCode])) {\n        delete transforms[sourceCode];\n    }\n    return transform;\n}\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */ function get(sourceCode, destinationCode) {\n    let transform;\n    if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n        transform = transforms[sourceCode][destinationCode];\n    }\n    return transform;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2wvcHJvai90cmFuc2Zvcm1zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0NBRUMsR0FDaUM7QUFFbEM7OztDQUdDLEdBQ0QsSUFBSUMsYUFBYSxDQUFDO0FBRWxCOztDQUVDLEdBQ00sU0FBU0M7SUFDZEQsYUFBYSxDQUFDO0FBQ2hCO0FBRUE7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNFLElBQUlDLE1BQU0sRUFBRUMsV0FBVyxFQUFFQyxXQUFXO0lBQ2xELE1BQU1DLGFBQWFILE9BQU9JLE9BQU87SUFDakMsTUFBTUMsa0JBQWtCSixZQUFZRyxPQUFPO0lBQzNDLElBQUksQ0FBRUQsQ0FBQUEsY0FBY04sVUFBUyxHQUFJO1FBQy9CQSxVQUFVLENBQUNNLFdBQVcsR0FBRyxDQUFDO0lBQzVCO0lBQ0FOLFVBQVUsQ0FBQ00sV0FBVyxDQUFDRSxnQkFBZ0IsR0FBR0g7QUFDNUM7QUFFQTs7Ozs7Ozs7Q0FRQyxHQUNNLFNBQVNJLE9BQU9OLE1BQU0sRUFBRUMsV0FBVztJQUN4QyxNQUFNRSxhQUFhSCxPQUFPSSxPQUFPO0lBQ2pDLE1BQU1DLGtCQUFrQkosWUFBWUcsT0FBTztJQUMzQyxNQUFNRyxZQUFZVixVQUFVLENBQUNNLFdBQVcsQ0FBQ0UsZ0JBQWdCO0lBQ3pELE9BQU9SLFVBQVUsQ0FBQ00sV0FBVyxDQUFDRSxnQkFBZ0I7SUFDOUMsSUFBSVQsZ0RBQU9BLENBQUNDLFVBQVUsQ0FBQ00sV0FBVyxHQUFHO1FBQ25DLE9BQU9OLFVBQVUsQ0FBQ00sV0FBVztJQUMvQjtJQUNBLE9BQU9JO0FBQ1Q7QUFFQTs7Ozs7Q0FLQyxHQUNNLFNBQVNDLElBQUlMLFVBQVUsRUFBRUUsZUFBZTtJQUM3QyxJQUFJRTtJQUNKLElBQUlKLGNBQWNOLGNBQWNRLG1CQUFtQlIsVUFBVSxDQUFDTSxXQUFXLEVBQUU7UUFDekVJLFlBQVlWLFVBQVUsQ0FBQ00sV0FBVyxDQUFDRSxnQkFBZ0I7SUFDckQ7SUFDQSxPQUFPRTtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWFwLy4vbm9kZV9tb2R1bGVzL29sL3Byb2ovdHJhbnNmb3Jtcy5qcz82YWY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG1vZHVsZSBvbC9wcm9qL3RyYW5zZm9ybXNcbiAqL1xuaW1wb3J0IHtpc0VtcHR5fSBmcm9tICcuLi9vYmouanMnO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsIE9iamVjdDxzdHJpbmcsIGltcG9ydChcIi4uL3Byb2ouanNcIikuVHJhbnNmb3JtRnVuY3Rpb24+Pn1cbiAqL1xubGV0IHRyYW5zZm9ybXMgPSB7fTtcblxuLyoqXG4gKiBDbGVhciB0aGUgdHJhbnNmb3JtIGNhY2hlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXIoKSB7XG4gIHRyYW5zZm9ybXMgPSB7fTtcbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgYSBjb252ZXJzaW9uIGZ1bmN0aW9uIHRvIGNvbnZlcnQgY29vcmRpbmF0ZXMgZnJvbSB0aGUgc291cmNlXG4gKiBwcm9qZWN0aW9uIHRvIHRoZSBkZXN0aW5hdGlvbiBwcm9qZWN0aW9uLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi9Qcm9qZWN0aW9uLmpzXCIpLmRlZmF1bHR9IHNvdXJjZSBTb3VyY2UuXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4vUHJvamVjdGlvbi5qc1wiKS5kZWZhdWx0fSBkZXN0aW5hdGlvbiBEZXN0aW5hdGlvbi5cbiAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vcHJvai5qc1wiKS5UcmFuc2Zvcm1GdW5jdGlvbn0gdHJhbnNmb3JtRm4gVHJhbnNmb3JtLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkKHNvdXJjZSwgZGVzdGluYXRpb24sIHRyYW5zZm9ybUZuKSB7XG4gIGNvbnN0IHNvdXJjZUNvZGUgPSBzb3VyY2UuZ2V0Q29kZSgpO1xuICBjb25zdCBkZXN0aW5hdGlvbkNvZGUgPSBkZXN0aW5hdGlvbi5nZXRDb2RlKCk7XG4gIGlmICghKHNvdXJjZUNvZGUgaW4gdHJhbnNmb3JtcykpIHtcbiAgICB0cmFuc2Zvcm1zW3NvdXJjZUNvZGVdID0ge307XG4gIH1cbiAgdHJhbnNmb3Jtc1tzb3VyY2VDb2RlXVtkZXN0aW5hdGlvbkNvZGVdID0gdHJhbnNmb3JtRm47XG59XG5cbi8qKlxuICogVW5yZWdpc3RlcnMgdGhlIGNvbnZlcnNpb24gZnVuY3Rpb24gdG8gY29udmVydCBjb29yZGluYXRlcyBmcm9tIHRoZSBzb3VyY2VcbiAqIHByb2plY3Rpb24gdG8gdGhlIGRlc3RpbmF0aW9uIHByb2plY3Rpb24uICBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIGNsZWFuIHVwXG4gKiBjYWNoZWQgdHJhbnNmb3JtcyBkdXJpbmcgdGVzdGluZy5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4vUHJvamVjdGlvbi5qc1wiKS5kZWZhdWx0fSBzb3VyY2UgU291cmNlIHByb2plY3Rpb24uXG4gKiBAcGFyYW0ge2ltcG9ydChcIi4vUHJvamVjdGlvbi5qc1wiKS5kZWZhdWx0fSBkZXN0aW5hdGlvbiBEZXN0aW5hdGlvbiBwcm9qZWN0aW9uLlxuICogQHJldHVybiB7aW1wb3J0KFwiLi4vcHJvai5qc1wiKS5UcmFuc2Zvcm1GdW5jdGlvbn0gdHJhbnNmb3JtRm4gVGhlIHVucmVnaXN0ZXJlZCB0cmFuc2Zvcm0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmUoc291cmNlLCBkZXN0aW5hdGlvbikge1xuICBjb25zdCBzb3VyY2VDb2RlID0gc291cmNlLmdldENvZGUoKTtcbiAgY29uc3QgZGVzdGluYXRpb25Db2RlID0gZGVzdGluYXRpb24uZ2V0Q29kZSgpO1xuICBjb25zdCB0cmFuc2Zvcm0gPSB0cmFuc2Zvcm1zW3NvdXJjZUNvZGVdW2Rlc3RpbmF0aW9uQ29kZV07XG4gIGRlbGV0ZSB0cmFuc2Zvcm1zW3NvdXJjZUNvZGVdW2Rlc3RpbmF0aW9uQ29kZV07XG4gIGlmIChpc0VtcHR5KHRyYW5zZm9ybXNbc291cmNlQ29kZV0pKSB7XG4gICAgZGVsZXRlIHRyYW5zZm9ybXNbc291cmNlQ29kZV07XG4gIH1cbiAgcmV0dXJuIHRyYW5zZm9ybTtcbn1cblxuLyoqXG4gKiBHZXQgYSB0cmFuc2Zvcm0gZ2l2ZW4gYSBzb3VyY2UgY29kZSBhbmQgYSBkZXN0aW5hdGlvbiBjb2RlLlxuICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZUNvZGUgVGhlIGNvZGUgZm9yIHRoZSBzb3VyY2UgcHJvamVjdGlvbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkZXN0aW5hdGlvbkNvZGUgVGhlIGNvZGUgZm9yIHRoZSBkZXN0aW5hdGlvbiBwcm9qZWN0aW9uLlxuICogQHJldHVybiB7aW1wb3J0KFwiLi4vcHJvai5qc1wiKS5UcmFuc2Zvcm1GdW5jdGlvbnx1bmRlZmluZWR9IFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gKGlmIGZvdW5kKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldChzb3VyY2VDb2RlLCBkZXN0aW5hdGlvbkNvZGUpIHtcbiAgbGV0IHRyYW5zZm9ybTtcbiAgaWYgKHNvdXJjZUNvZGUgaW4gdHJhbnNmb3JtcyAmJiBkZXN0aW5hdGlvbkNvZGUgaW4gdHJhbnNmb3Jtc1tzb3VyY2VDb2RlXSkge1xuICAgIHRyYW5zZm9ybSA9IHRyYW5zZm9ybXNbc291cmNlQ29kZV1bZGVzdGluYXRpb25Db2RlXTtcbiAgfVxuICByZXR1cm4gdHJhbnNmb3JtO1xufVxuIl0sIm5hbWVzIjpbImlzRW1wdHkiLCJ0cmFuc2Zvcm1zIiwiY2xlYXIiLCJhZGQiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsInRyYW5zZm9ybUZuIiwic291cmNlQ29kZSIsImdldENvZGUiLCJkZXN0aW5hdGlvbkNvZGUiLCJyZW1vdmUiLCJ0cmFuc2Zvcm0iLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/proj/transforms.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/sphere.js":
/*!***********************************!*\
  !*** ./node_modules/ol/sphere.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_RADIUS: () => (/* binding */ DEFAULT_RADIUS),\n/* harmony export */   getArea: () => (/* binding */ getArea),\n/* harmony export */   getDistance: () => (/* binding */ getDistance),\n/* harmony export */   getLength: () => (/* binding */ getLength),\n/* harmony export */   offset: () => (/* binding */ offset)\n/* harmony export */ });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./math.js */ \"(ssr)/./node_modules/ol/math.js\");\n/**\n * @module ol/sphere\n */ \n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */ /**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */ const DEFAULT_RADIUS = 6371008.8;\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */ function getDistance(c1, c2, radius) {\n    radius = radius || DEFAULT_RADIUS;\n    const lat1 = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.toRadians)(c1[1]);\n    const lat2 = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.toRadians)(c2[1]);\n    const deltaLatBy2 = (lat2 - lat1) / 2;\n    const deltaLonBy2 = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.toRadians)(c2[0] - c1[0]) / 2;\n    const a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) + Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) * Math.cos(lat1) * Math.cos(lat2);\n    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */ function getLengthInternal(coordinates, radius) {\n    let length = 0;\n    for(let i = 0, ii = coordinates.length; i < ii - 1; ++i){\n        length += getDistance(coordinates[i], coordinates[i + 1], radius);\n    }\n    return length;\n}\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */ function getLength(geometry, options) {\n    options = options || {};\n    const radius = options.radius || DEFAULT_RADIUS;\n    const projection = options.projection || \"EPSG:3857\";\n    const type = geometry.getType();\n    if (type !== \"GeometryCollection\") {\n        geometry = geometry.clone().transform(projection, \"EPSG:4326\");\n    }\n    let length = 0;\n    let coordinates, coords, i, ii, j, jj;\n    switch(type){\n        case \"Point\":\n        case \"MultiPoint\":\n            {\n                break;\n            }\n        case \"LineString\":\n        case \"LinearRing\":\n            {\n                coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n                length = getLengthInternal(coordinates, radius);\n                break;\n            }\n        case \"MultiLineString\":\n        case \"Polygon\":\n            {\n                coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n                for(i = 0, ii = coordinates.length; i < ii; ++i){\n                    length += getLengthInternal(coordinates[i], radius);\n                }\n                break;\n            }\n        case \"MultiPolygon\":\n            {\n                coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n                for(i = 0, ii = coordinates.length; i < ii; ++i){\n                    coords = coordinates[i];\n                    for(j = 0, jj = coords.length; j < jj; ++j){\n                        length += getLengthInternal(coords[j], radius);\n                    }\n                }\n                break;\n            }\n        case \"GeometryCollection\":\n            {\n                const geometries = /** @type {import(\"./geom/GeometryCollection.js\").default} */ geometry.getGeometries();\n                for(i = 0, ii = geometries.length; i < ii; ++i){\n                    length += getLength(geometries[i], options);\n                }\n                break;\n            }\n        default:\n            {\n                throw new Error(\"Unsupported geometry type: \" + type);\n            }\n    }\n    return length;\n}\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */ function getAreaInternal(coordinates, radius) {\n    let area = 0;\n    const len = coordinates.length;\n    let x1 = coordinates[len - 1][0];\n    let y1 = coordinates[len - 1][1];\n    for(let i = 0; i < len; i++){\n        const x2 = coordinates[i][0];\n        const y2 = coordinates[i][1];\n        area += (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.toRadians)(x2 - x1) * (2 + Math.sin((0,_math_js__WEBPACK_IMPORTED_MODULE_0__.toRadians)(y1)) + Math.sin((0,_math_js__WEBPACK_IMPORTED_MODULE_0__.toRadians)(y2)));\n        x1 = x2;\n        y1 = y2;\n    }\n    return area * radius * radius / 2.0;\n}\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */ function getArea(geometry, options) {\n    options = options || {};\n    const radius = options.radius || DEFAULT_RADIUS;\n    const projection = options.projection || \"EPSG:3857\";\n    const type = geometry.getType();\n    if (type !== \"GeometryCollection\") {\n        geometry = geometry.clone().transform(projection, \"EPSG:4326\");\n    }\n    let area = 0;\n    let coordinates, coords, i, ii, j, jj;\n    switch(type){\n        case \"Point\":\n        case \"MultiPoint\":\n        case \"LineString\":\n        case \"MultiLineString\":\n        case \"LinearRing\":\n            {\n                break;\n            }\n        case \"Polygon\":\n            {\n                coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ geometry.getCoordinates();\n                area = Math.abs(getAreaInternal(coordinates[0], radius));\n                for(i = 1, ii = coordinates.length; i < ii; ++i){\n                    area -= Math.abs(getAreaInternal(coordinates[i], radius));\n                }\n                break;\n            }\n        case \"MultiPolygon\":\n            {\n                coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n                for(i = 0, ii = coordinates.length; i < ii; ++i){\n                    coords = coordinates[i];\n                    area += Math.abs(getAreaInternal(coords[0], radius));\n                    for(j = 1, jj = coords.length; j < jj; ++j){\n                        area -= Math.abs(getAreaInternal(coords[j], radius));\n                    }\n                }\n                break;\n            }\n        case \"GeometryCollection\":\n            {\n                const geometries = /** @type {import(\"./geom/GeometryCollection.js\").default} */ geometry.getGeometries();\n                for(i = 0, ii = geometries.length; i < ii; ++i){\n                    area += getArea(geometries[i], options);\n                }\n                break;\n            }\n        default:\n            {\n                throw new Error(\"Unsupported geometry type: \" + type);\n            }\n    }\n    return area;\n}\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */ function offset(c1, distance, bearing, radius) {\n    radius = radius || DEFAULT_RADIUS;\n    const lat1 = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.toRadians)(c1[1]);\n    const lon1 = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.toRadians)(c1[0]);\n    const dByR = distance / radius;\n    const lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n    const lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n    return [\n        (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.toDegrees)(lon),\n        (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.toDegrees)(lat)\n    ];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/sphere.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/ol/string.js":
/*!***********************************!*\
  !*** ./node_modules/ol/string.js ***!
  \***********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   compareVersions: () => (/* binding */ compareVersions),\n/* harmony export */   padNumber: () => (/* binding */ padNumber)\n/* harmony export */ });\n/**\n * @module ol/string\n */ /**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */ function padNumber(number, width, precision) {\n    const numberString = precision !== undefined ? number.toFixed(precision) : \"\" + number;\n    let decimal = numberString.indexOf(\".\");\n    decimal = decimal === -1 ? numberString.length : decimal;\n    return decimal > width ? numberString : new Array(1 + width - decimal).join(\"0\") + numberString;\n}\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */ function compareVersions(v1, v2) {\n    const s1 = (\"\" + v1).split(\".\");\n    const s2 = (\"\" + v2).split(\".\");\n    for(let i = 0; i < Math.max(s1.length, s2.length); i++){\n        const n1 = parseInt(s1[i] || \"0\", 10);\n        const n2 = parseInt(s2[i] || \"0\", 10);\n        if (n1 > n2) {\n            return 1;\n        }\n        if (n2 > n1) {\n            return -1;\n        }\n    }\n    return 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvb2wvc3RyaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0NBRUMsR0FFRDs7Ozs7Q0FLQyxHQUNNLFNBQVNBLFVBQVVDLE1BQU0sRUFBRUMsS0FBSyxFQUFFQyxTQUFTO0lBQ2hELE1BQU1DLGVBQ0pELGNBQWNFLFlBQVlKLE9BQU9LLE9BQU8sQ0FBQ0gsYUFBYSxLQUFLRjtJQUM3RCxJQUFJTSxVQUFVSCxhQUFhSSxPQUFPLENBQUM7SUFDbkNELFVBQVVBLFlBQVksQ0FBQyxJQUFJSCxhQUFhSyxNQUFNLEdBQUdGO0lBQ2pELE9BQU9BLFVBQVVMLFFBQ2JFLGVBQ0EsSUFBSU0sTUFBTSxJQUFJUixRQUFRSyxTQUFTSSxJQUFJLENBQUMsT0FBT1A7QUFDakQ7QUFFQTs7Ozs7Q0FLQyxHQUNNLFNBQVNRLGdCQUFnQkMsRUFBRSxFQUFFQyxFQUFFO0lBQ3BDLE1BQU1DLEtBQUssQ0FBQyxLQUFLRixFQUFDLEVBQUdHLEtBQUssQ0FBQztJQUMzQixNQUFNQyxLQUFLLENBQUMsS0FBS0gsRUFBQyxFQUFHRSxLQUFLLENBQUM7SUFFM0IsSUFBSyxJQUFJRSxJQUFJLEdBQUdBLElBQUlDLEtBQUtDLEdBQUcsQ0FBQ0wsR0FBR04sTUFBTSxFQUFFUSxHQUFHUixNQUFNLEdBQUdTLElBQUs7UUFDdkQsTUFBTUcsS0FBS0MsU0FBU1AsRUFBRSxDQUFDRyxFQUFFLElBQUksS0FBSztRQUNsQyxNQUFNSyxLQUFLRCxTQUFTTCxFQUFFLENBQUNDLEVBQUUsSUFBSSxLQUFLO1FBRWxDLElBQUlHLEtBQUtFLElBQUk7WUFDWCxPQUFPO1FBQ1Q7UUFDQSxJQUFJQSxLQUFLRixJQUFJO1lBQ1gsT0FBTyxDQUFDO1FBQ1Y7SUFDRjtJQUVBLE9BQU87QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL21hcC8uL25vZGVfbW9kdWxlcy9vbC9zdHJpbmcuanM/NmI5NyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBtb2R1bGUgb2wvc3RyaW5nXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIE51bWJlciB0byBiZSBmb3JtYXR0ZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBUaGUgZGVzaXJlZCB3aWR0aFxuICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb25dIFByZWNpc2lvbiBvZiB0aGUgb3V0cHV0IHN0cmluZyAoaS5lLiBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMpXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhZE51bWJlcihudW1iZXIsIHdpZHRoLCBwcmVjaXNpb24pIHtcbiAgY29uc3QgbnVtYmVyU3RyaW5nID1cbiAgICBwcmVjaXNpb24gIT09IHVuZGVmaW5lZCA/IG51bWJlci50b0ZpeGVkKHByZWNpc2lvbikgOiAnJyArIG51bWJlcjtcbiAgbGV0IGRlY2ltYWwgPSBudW1iZXJTdHJpbmcuaW5kZXhPZignLicpO1xuICBkZWNpbWFsID0gZGVjaW1hbCA9PT0gLTEgPyBudW1iZXJTdHJpbmcubGVuZ3RoIDogZGVjaW1hbDtcbiAgcmV0dXJuIGRlY2ltYWwgPiB3aWR0aFxuICAgID8gbnVtYmVyU3RyaW5nXG4gICAgOiBuZXcgQXJyYXkoMSArIHdpZHRoIC0gZGVjaW1hbCkuam9pbignMCcpICsgbnVtYmVyU3RyaW5nO1xufVxuXG4vKipcbiAqIEFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vb21pY2hlbHNlbi9jb21wYXJlLXZlcnNpb25zL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHYxIEZpcnN0IHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdjIgU2Vjb25kIHZlcnNpb25cbiAqIEByZXR1cm4ge251bWJlcn0gVmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVWZXJzaW9ucyh2MSwgdjIpIHtcbiAgY29uc3QgczEgPSAoJycgKyB2MSkuc3BsaXQoJy4nKTtcbiAgY29uc3QgczIgPSAoJycgKyB2Mikuc3BsaXQoJy4nKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWF4KHMxLmxlbmd0aCwgczIubGVuZ3RoKTsgaSsrKSB7XG4gICAgY29uc3QgbjEgPSBwYXJzZUludChzMVtpXSB8fCAnMCcsIDEwKTtcbiAgICBjb25zdCBuMiA9IHBhcnNlSW50KHMyW2ldIHx8ICcwJywgMTApO1xuXG4gICAgaWYgKG4xID4gbjIpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICBpZiAobjIgPiBuMSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuIl0sIm5hbWVzIjpbInBhZE51bWJlciIsIm51bWJlciIsIndpZHRoIiwicHJlY2lzaW9uIiwibnVtYmVyU3RyaW5nIiwidW5kZWZpbmVkIiwidG9GaXhlZCIsImRlY2ltYWwiLCJpbmRleE9mIiwibGVuZ3RoIiwiQXJyYXkiLCJqb2luIiwiY29tcGFyZVZlcnNpb25zIiwidjEiLCJ2MiIsInMxIiwic3BsaXQiLCJzMiIsImkiLCJNYXRoIiwibWF4IiwibjEiLCJwYXJzZUludCIsIm4yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/ol/string.js\n");

/***/ })

};
;